
Embedded_OS_Lab2_NE6091116.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004db4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004f44  08004f44  00014f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f7c  08004f7c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004f7c  08004f7c  00014f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f84  08004f84  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f84  08004f84  00014f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f88  08004f88  00014f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004f8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012e5c  20000010  08004f9c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012e6c  08004f9c  00022e6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011d9a  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002764  00000000  00000000  00031dda  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001020  00000000  00000000  00034540  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ef8  00000000  00000000  00035560  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021741  00000000  00000000  00036458  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c282  00000000  00000000  00057b99  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d008a  00000000  00000000  00063e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00133ea5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004304  00000000  00000000  00133f20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f2c 	.word	0x08004f2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004f2c 	.word	0x08004f2c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <MEMS_Write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void MEMS_Write(uint8_t address,uint8_t data){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	4603      	mov	r3, r0
 80004d8:	460a      	mov	r2, r1
 80004da:	71fb      	strb	r3, [r7, #7]
 80004dc:	4613      	mov	r3, r2
 80004de:	71bb      	strb	r3, [r7, #6]
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80004e0:	2200      	movs	r2, #0
 80004e2:	2108      	movs	r1, #8
 80004e4:	480b      	ldr	r0, [pc, #44]	; (8000514 <MEMS_Write+0x44>)
 80004e6:	f000 fdfb 	bl	80010e0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,&address,1,10);
 80004ea:	1df9      	adds	r1, r7, #7
 80004ec:	230a      	movs	r3, #10
 80004ee:	2201      	movs	r2, #1
 80004f0:	4809      	ldr	r0, [pc, #36]	; (8000518 <MEMS_Write+0x48>)
 80004f2:	f001 faff 	bl	8001af4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&hspi1,&data,1,10);
 80004f6:	1db9      	adds	r1, r7, #6
 80004f8:	230a      	movs	r3, #10
 80004fa:	2201      	movs	r2, #1
 80004fc:	4806      	ldr	r0, [pc, #24]	; (8000518 <MEMS_Write+0x48>)
 80004fe:	f001 faf9 	bl	8001af4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3,GPIO_PIN_SET);
 8000502:	2201      	movs	r2, #1
 8000504:	2108      	movs	r1, #8
 8000506:	4803      	ldr	r0, [pc, #12]	; (8000514 <MEMS_Write+0x44>)
 8000508:	f000 fdea 	bl	80010e0 <HAL_GPIO_WritePin>
}
 800050c:	bf00      	nop
 800050e:	3708      	adds	r7, #8
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	40021000 	.word	0x40021000
 8000518:	20012d90 	.word	0x20012d90

0800051c <vlab2_sensor_init>:
//	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_RESET);
//	HAL_SPI_Transmit(&hspi1,&address,1,10);
//	HAL_SPI_Receive(&hspi1,data,1,10);
//	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_3,GPIO_PIN_SET);
//}
void vlab2_sensor_init(){
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
	MEMS_Write(0x21,0x01);
 8000520:	2101      	movs	r1, #1
 8000522:	2021      	movs	r0, #33	; 0x21
 8000524:	f7ff ffd4 	bl	80004d0 <MEMS_Write>
	MEMS_Write(0x23,0x48);
 8000528:	2148      	movs	r1, #72	; 0x48
 800052a:	2023      	movs	r0, #35	; 0x23
 800052c:	f7ff ffd0 	bl	80004d0 <MEMS_Write>
	MEMS_Write(0x20,0x67);
 8000530:	2167      	movs	r1, #103	; 0x67
 8000532:	2020      	movs	r0, #32
 8000534:	f7ff ffcc 	bl	80004d0 <MEMS_Write>
	MEMS_Write(0x24,0x00);
 8000538:	2100      	movs	r1, #0
 800053a:	2024      	movs	r0, #36	; 0x24
 800053c:	f7ff ffc8 	bl	80004d0 <MEMS_Write>
	MEMS_Write(0x57,0x55);
 8000540:	2155      	movs	r1, #85	; 0x55
 8000542:	2057      	movs	r0, #87	; 0x57
 8000544:	f7ff ffc4 	bl	80004d0 <MEMS_Write>
	MEMS_Write(0x40,0x05);
 8000548:	2105      	movs	r1, #5
 800054a:	2040      	movs	r0, #64	; 0x40
 800054c:	f7ff ffc0 	bl	80004d0 <MEMS_Write>
	MEMS_Write(0x41,0x11);
 8000550:	2111      	movs	r1, #17
 8000552:	2041      	movs	r0, #65	; 0x41
 8000554:	f7ff ffbc 	bl	80004d0 <MEMS_Write>
	MEMS_Write(0x59,0xFC);
 8000558:	21fc      	movs	r1, #252	; 0xfc
 800055a:	2059      	movs	r0, #89	; 0x59
 800055c:	f7ff ffb8 	bl	80004d0 <MEMS_Write>
	MEMS_Write(0x5A,0xFC);
 8000560:	21fc      	movs	r1, #252	; 0xfc
 8000562:	205a      	movs	r0, #90	; 0x5a
 8000564:	f7ff ffb4 	bl	80004d0 <MEMS_Write>
	MEMS_Write(0x5B,0x01);
 8000568:	2101      	movs	r1, #1
 800056a:	205b      	movs	r0, #91	; 0x5b
 800056c:	f7ff ffb0 	bl	80004d0 <MEMS_Write>
}
 8000570:	bf00      	nop
 8000572:	bd80      	pop	{r7, pc}

08000574 <Task1_Task>:

void Task1_Task(void *pvParameters){
 8000574:	b580      	push	{r7, lr}
 8000576:	b082      	sub	sp, #8
 8000578:	af00      	add	r7, sp, #0
 800057a:	6078      	str	r0, [r7, #4]

	while(1){
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800057c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000580:	4803      	ldr	r0, [pc, #12]	; (8000590 <Task1_Task+0x1c>)
 8000582:	f000 fdc6 	bl	8001112 <HAL_GPIO_TogglePin>
		    	vTaskDelay(1000);
 8000586:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800058a:	f002 ff09 	bl	80033a0 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800058e:	e7f5      	b.n	800057c <Task1_Task+0x8>
 8000590:	40020c00 	.word	0x40020c00

08000594 <HandlerTask_Task>:
		}
	//vlab2_sensor_init();
	}
void HandlerTask_Task(void *pvParameters){
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]

	while(1){
		if( xSemaphoreTake( xSemaphore, 255 ) == pdTRUE ){
 800059c:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <HandlerTask_Task+0x5c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	21ff      	movs	r1, #255	; 0xff
 80005a2:	4618      	mov	r0, r3
 80005a4:	f002 fb32 	bl	8002c0c <xQueueSemaphoreTake>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d1f6      	bne.n	800059c <HandlerTask_Task+0x8>
			int i;
			for(i=0; i<5; i++){
 80005ae:	2300      	movs	r3, #0
 80005b0:	60fb      	str	r3, [r7, #12]
 80005b2:	e016      	b.n	80005e2 <HandlerTask_Task+0x4e>
//				HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
//				vTaskDelay(1000);
				HAL_GPIO_WritePin(Orange_LED_GPIO_Port, GPIO_PIN_13, 1);
 80005b4:	2201      	movs	r2, #1
 80005b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ba:	480e      	ldr	r0, [pc, #56]	; (80005f4 <HandlerTask_Task+0x60>)
 80005bc:	f000 fd90 	bl	80010e0 <HAL_GPIO_WritePin>
				vTaskDelay(1000);
 80005c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c4:	f002 feec 	bl	80033a0 <vTaskDelay>
				HAL_GPIO_WritePin(Orange_LED_GPIO_Port, GPIO_PIN_13, 0);
 80005c8:	2200      	movs	r2, #0
 80005ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ce:	4809      	ldr	r0, [pc, #36]	; (80005f4 <HandlerTask_Task+0x60>)
 80005d0:	f000 fd86 	bl	80010e0 <HAL_GPIO_WritePin>
				vTaskDelay(1000);
 80005d4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d8:	f002 fee2 	bl	80033a0 <vTaskDelay>
			for(i=0; i<5; i++){
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	3301      	adds	r3, #1
 80005e0:	60fb      	str	r3, [r7, #12]
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	2b04      	cmp	r3, #4
 80005e6:	dde5      	ble.n	80005b4 <HandlerTask_Task+0x20>
			}
		vlab2_sensor_init();
 80005e8:	f7ff ff98 	bl	800051c <vlab2_sensor_init>
		if( xSemaphoreTake( xSemaphore, 255 ) == pdTRUE ){
 80005ec:	e7d6      	b.n	800059c <HandlerTask_Task+0x8>
 80005ee:	bf00      	nop
 80005f0:	20012d8c 	.word	0x20012d8c
 80005f4:	40020c00 	.word	0x40020c00

080005f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005fe:	f000 fab1 	bl	8000b64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000602:	f000 f82d 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000606:	f000 f8bf 	bl	8000788 <MX_GPIO_Init>
  MX_SPI1_Init();
 800060a:	f000 f887 	bl	800071c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  vlab2_sensor_init();
 800060e:	f7ff ff85 	bl	800051c <vlab2_sensor_init>
  xSemaphore = xSemaphoreCreateBinary();
 8000612:	2203      	movs	r2, #3
 8000614:	2100      	movs	r1, #0
 8000616:	2001      	movs	r0, #1
 8000618:	f001 ffa6 	bl	8002568 <xQueueGenericCreate>
 800061c:	4602      	mov	r2, r0
 800061e:	4b0c      	ldr	r3, [pc, #48]	; (8000650 <main+0x58>)
 8000620:	601a      	str	r2, [r3, #0]
  xTaskCreate(
 8000622:	2300      	movs	r3, #0
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2301      	movs	r3, #1
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	2300      	movs	r3, #0
 800062c:	2282      	movs	r2, #130	; 0x82
 800062e:	4909      	ldr	r1, [pc, #36]	; (8000654 <main+0x5c>)
 8000630:	4809      	ldr	r0, [pc, #36]	; (8000658 <main+0x60>)
 8000632:	f002 fd77 	bl	8003124 <xTaskCreate>
                        "NAME",          /* Text name for the task. */
                        130,      /* Stack size in words, not bytes. */
                        NULL,
                        1,
                        NULL);
  xTaskCreate(
 8000636:	2300      	movs	r3, #0
 8000638:	9301      	str	r3, [sp, #4]
 800063a:	2302      	movs	r3, #2
 800063c:	9300      	str	r3, [sp, #0]
 800063e:	2300      	movs	r3, #0
 8000640:	2282      	movs	r2, #130	; 0x82
 8000642:	4904      	ldr	r1, [pc, #16]	; (8000654 <main+0x5c>)
 8000644:	4805      	ldr	r0, [pc, #20]	; (800065c <main+0x64>)
 8000646:	f002 fd6d 	bl	8003124 <xTaskCreate>
                         "NAME",          /* Text name for the task. */
                         130,      /* Stack size in words, not bytes. */
                         NULL,
                         2,
                         NULL);
    vTaskStartScheduler();
 800064a:	f002 fedd 	bl	8003408 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064e:	e7fe      	b.n	800064e <main+0x56>
 8000650:	20012d8c 	.word	0x20012d8c
 8000654:	08004f44 	.word	0x08004f44
 8000658:	08000575 	.word	0x08000575
 800065c:	08000595 	.word	0x08000595

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	; 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f004 fc53 	bl	8004f1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b22      	ldr	r3, [pc, #136]	; (8000714 <SystemClock_Config+0xb4>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	4a21      	ldr	r2, [pc, #132]	; (8000714 <SystemClock_Config+0xb4>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	; 0x40
 8000694:	4b1f      	ldr	r3, [pc, #124]	; (8000714 <SystemClock_Config+0xb4>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b1c      	ldr	r3, [pc, #112]	; (8000718 <SystemClock_Config+0xb8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a1b      	ldr	r2, [pc, #108]	; (8000718 <SystemClock_Config+0xb8>)
 80006aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b19      	ldr	r3, [pc, #100]	; (8000718 <SystemClock_Config+0xb8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006c8:	2300      	movs	r3, #0
 80006ca:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006cc:	f107 0320 	add.w	r3, r7, #32
 80006d0:	4618      	mov	r0, r3
 80006d2:	f000 fd51 	bl	8001178 <HAL_RCC_OscConfig>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006dc:	f000 f90e 	bl	80008fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e0:	230f      	movs	r3, #15
 80006e2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006e4:	2300      	movs	r3, #0
 80006e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e8:	2300      	movs	r3, #0
 80006ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006f4:	f107 030c 	add.w	r3, r7, #12
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f000 ffac 	bl	8001658 <HAL_RCC_ClockConfig>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000706:	f000 f8f9 	bl	80008fc <Error_Handler>
  }
}
 800070a:	bf00      	nop
 800070c:	3750      	adds	r7, #80	; 0x50
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40023800 	.word	0x40023800
 8000718:	40007000 	.word	0x40007000

0800071c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000720:	4b17      	ldr	r3, [pc, #92]	; (8000780 <MX_SPI1_Init+0x64>)
 8000722:	4a18      	ldr	r2, [pc, #96]	; (8000784 <MX_SPI1_Init+0x68>)
 8000724:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000726:	4b16      	ldr	r3, [pc, #88]	; (8000780 <MX_SPI1_Init+0x64>)
 8000728:	f44f 7282 	mov.w	r2, #260	; 0x104
 800072c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000734:	4b12      	ldr	r3, [pc, #72]	; (8000780 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800073a:	4b11      	ldr	r3, [pc, #68]	; (8000780 <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000740:	4b0f      	ldr	r3, [pc, #60]	; (8000780 <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000746:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <MX_SPI1_Init+0x64>)
 8000748:	f44f 7200 	mov.w	r2, #512	; 0x200
 800074c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <MX_SPI1_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000754:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <MX_SPI1_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800075a:	4b09      	ldr	r3, [pc, #36]	; (8000780 <MX_SPI1_Init+0x64>)
 800075c:	2200      	movs	r2, #0
 800075e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000760:	4b07      	ldr	r3, [pc, #28]	; (8000780 <MX_SPI1_Init+0x64>)
 8000762:	2200      	movs	r2, #0
 8000764:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <MX_SPI1_Init+0x64>)
 8000768:	220a      	movs	r2, #10
 800076a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800076c:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_SPI1_Init+0x64>)
 800076e:	f001 f95d 	bl	8001a2c <HAL_SPI_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000778:	f000 f8c0 	bl	80008fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20012d90 	.word	0x20012d90
 8000784:	40013000 	.word	0x40013000

08000788 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	4b34      	ldr	r3, [pc, #208]	; (8000874 <MX_GPIO_Init+0xec>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a33      	ldr	r2, [pc, #204]	; (8000874 <MX_GPIO_Init+0xec>)
 80007a8:	f043 0310 	orr.w	r3, r3, #16
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b31      	ldr	r3, [pc, #196]	; (8000874 <MX_GPIO_Init+0xec>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0310 	and.w	r3, r3, #16
 80007b6:	60bb      	str	r3, [r7, #8]
 80007b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	4b2d      	ldr	r3, [pc, #180]	; (8000874 <MX_GPIO_Init+0xec>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a2c      	ldr	r2, [pc, #176]	; (8000874 <MX_GPIO_Init+0xec>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b2a      	ldr	r3, [pc, #168]	; (8000874 <MX_GPIO_Init+0xec>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	603b      	str	r3, [r7, #0]
 80007da:	4b26      	ldr	r3, [pc, #152]	; (8000874 <MX_GPIO_Init+0xec>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a25      	ldr	r2, [pc, #148]	; (8000874 <MX_GPIO_Init+0xec>)
 80007e0:	f043 0308 	orr.w	r3, r3, #8
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b23      	ldr	r3, [pc, #140]	; (8000874 <MX_GPIO_Init+0xec>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0308 	and.w	r3, r3, #8
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2108      	movs	r1, #8
 80007f6:	4820      	ldr	r0, [pc, #128]	; (8000878 <MX_GPIO_Init+0xf0>)
 80007f8:	f000 fc72 	bl	80010e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, Green_LED_Pin|Orange_LED_Pin|Red_LED_Pin, GPIO_PIN_RESET);
 80007fc:	2200      	movs	r2, #0
 80007fe:	f44f 41e0 	mov.w	r1, #28672	; 0x7000
 8000802:	481e      	ldr	r0, [pc, #120]	; (800087c <MX_GPIO_Init+0xf4>)
 8000804:	f000 fc6c 	bl	80010e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000808:	2308      	movs	r3, #8
 800080a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800080c:	2301      	movs	r3, #1
 800080e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000814:	2300      	movs	r3, #0
 8000816:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	4619      	mov	r1, r3
 800081e:	4816      	ldr	r0, [pc, #88]	; (8000878 <MX_GPIO_Init+0xf0>)
 8000820:	f000 fac4 	bl	8000dac <HAL_GPIO_Init>

  /*Configure GPIO pins : Green_LED_Pin Orange_LED_Pin Red_LED_Pin */
  GPIO_InitStruct.Pin = Green_LED_Pin|Orange_LED_Pin|Red_LED_Pin;
 8000824:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000828:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082a:	2301      	movs	r3, #1
 800082c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082e:	2300      	movs	r3, #0
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000832:	2300      	movs	r3, #0
 8000834:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	4619      	mov	r1, r3
 800083c:	480f      	ldr	r0, [pc, #60]	; (800087c <MX_GPIO_Init+0xf4>)
 800083e:	f000 fab5 	bl	8000dac <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000842:	2301      	movs	r3, #1
 8000844:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_GPIO_Init+0xf8>)
 8000848:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084a:	2300      	movs	r3, #0
 800084c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800084e:	f107 030c 	add.w	r3, r7, #12
 8000852:	4619      	mov	r1, r3
 8000854:	4808      	ldr	r0, [pc, #32]	; (8000878 <MX_GPIO_Init+0xf0>)
 8000856:	f000 faa9 	bl	8000dac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 7, 0);
 800085a:	2200      	movs	r2, #0
 800085c:	2107      	movs	r1, #7
 800085e:	2006      	movs	r0, #6
 8000860:	f000 fa7a 	bl	8000d58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000864:	2006      	movs	r0, #6
 8000866:	f000 fa93 	bl	8000d90 <HAL_NVIC_EnableIRQ>

}
 800086a:	bf00      	nop
 800086c:	3720      	adds	r7, #32
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800
 8000878:	40021000 	.word	0x40021000
 800087c:	40020c00 	.word	0x40020c00
 8000880:	10110000 	.word	0x10110000

08000884 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_PIN)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b084      	sub	sp, #16
 8000888:	af00      	add	r7, sp, #0
 800088a:	4603      	mov	r3, r0
 800088c:	80fb      	strh	r3, [r7, #6]
    /* switch Red LED state */
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 800088e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000892:	480e      	ldr	r0, [pc, #56]	; (80008cc <HAL_GPIO_EXTI_Callback+0x48>)
 8000894:	f000 fc3d 	bl	8001112 <HAL_GPIO_TogglePin>

    /* semaphore give */
    BaseType_t xHigherPriorityTaskWoken;
    xHigherPriorityTaskWoken = pdFALSE;
 8000898:	2300      	movs	r3, #0
 800089a:	60fb      	str	r3, [r7, #12]
    xSemaphoreGiveFromISR( xSemaphore, &xHigherPriorityTaskWoken );
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <HAL_GPIO_EXTI_Callback+0x4c>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f107 020c 	add.w	r2, r7, #12
 80008a4:	4611      	mov	r1, r2
 80008a6:	4618      	mov	r0, r3
 80008a8:	f002 f84a 	bl	8002940 <xQueueGiveFromISR>
    portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d007      	beq.n	80008c2 <HAL_GPIO_EXTI_Callback+0x3e>
 80008b2:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <HAL_GPIO_EXTI_Callback+0x50>)
 80008b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	f3bf 8f4f 	dsb	sy
 80008be:	f3bf 8f6f 	isb	sy
}
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40020c00 	.word	0x40020c00
 80008d0:	20012d8c 	.word	0x20012d8c
 80008d4:	e000ed04 	.word	0xe000ed04

080008d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a04      	ldr	r2, [pc, #16]	; (80008f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d101      	bne.n	80008ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ea:	f000 f95d 	bl	8000ba8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40001000 	.word	0x40001000

080008fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000900:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000902:	e7fe      	b.n	8000902 <Error_Handler+0x6>

08000904 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800090a:	2300      	movs	r3, #0
 800090c:	607b      	str	r3, [r7, #4]
 800090e:	4b10      	ldr	r3, [pc, #64]	; (8000950 <HAL_MspInit+0x4c>)
 8000910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000912:	4a0f      	ldr	r2, [pc, #60]	; (8000950 <HAL_MspInit+0x4c>)
 8000914:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000918:	6453      	str	r3, [r2, #68]	; 0x44
 800091a:	4b0d      	ldr	r3, [pc, #52]	; (8000950 <HAL_MspInit+0x4c>)
 800091c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000926:	2300      	movs	r3, #0
 8000928:	603b      	str	r3, [r7, #0]
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <HAL_MspInit+0x4c>)
 800092c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092e:	4a08      	ldr	r2, [pc, #32]	; (8000950 <HAL_MspInit+0x4c>)
 8000930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000934:	6413      	str	r3, [r2, #64]	; 0x40
 8000936:	4b06      	ldr	r3, [pc, #24]	; (8000950 <HAL_MspInit+0x4c>)
 8000938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093e:	603b      	str	r3, [r7, #0]
 8000940:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000942:	bf00      	nop
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	40023800 	.word	0x40023800

08000954 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	; 0x28
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a19      	ldr	r2, [pc, #100]	; (80009d8 <HAL_SPI_MspInit+0x84>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d12b      	bne.n	80009ce <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	4b18      	ldr	r3, [pc, #96]	; (80009dc <HAL_SPI_MspInit+0x88>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	4a17      	ldr	r2, [pc, #92]	; (80009dc <HAL_SPI_MspInit+0x88>)
 8000980:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000984:	6453      	str	r3, [r2, #68]	; 0x44
 8000986:	4b15      	ldr	r3, [pc, #84]	; (80009dc <HAL_SPI_MspInit+0x88>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800098e:	613b      	str	r3, [r7, #16]
 8000990:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	4b11      	ldr	r3, [pc, #68]	; (80009dc <HAL_SPI_MspInit+0x88>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a10      	ldr	r2, [pc, #64]	; (80009dc <HAL_SPI_MspInit+0x88>)
 800099c:	f043 0301 	orr.w	r3, r3, #1
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <HAL_SPI_MspInit+0x88>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0301 	and.w	r3, r3, #1
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80009ae:	23e0      	movs	r3, #224	; 0xe0
 80009b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b2:	2302      	movs	r3, #2
 80009b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b6:	2300      	movs	r3, #0
 80009b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ba:	2303      	movs	r3, #3
 80009bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009be:	2305      	movs	r3, #5
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c2:	f107 0314 	add.w	r3, r7, #20
 80009c6:	4619      	mov	r1, r3
 80009c8:	4805      	ldr	r0, [pc, #20]	; (80009e0 <HAL_SPI_MspInit+0x8c>)
 80009ca:	f000 f9ef 	bl	8000dac <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009ce:	bf00      	nop
 80009d0:	3728      	adds	r7, #40	; 0x28
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40013000 	.word	0x40013000
 80009dc:	40023800 	.word	0x40023800
 80009e0:	40020000 	.word	0x40020000

080009e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b08c      	sub	sp, #48	; 0x30
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80009f4:	2200      	movs	r2, #0
 80009f6:	6879      	ldr	r1, [r7, #4]
 80009f8:	2036      	movs	r0, #54	; 0x36
 80009fa:	f000 f9ad 	bl	8000d58 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009fe:	2036      	movs	r0, #54	; 0x36
 8000a00:	f000 f9c6 	bl	8000d90 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
 8000a08:	4b1e      	ldr	r3, [pc, #120]	; (8000a84 <HAL_InitTick+0xa0>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	4a1d      	ldr	r2, [pc, #116]	; (8000a84 <HAL_InitTick+0xa0>)
 8000a0e:	f043 0310 	orr.w	r3, r3, #16
 8000a12:	6413      	str	r3, [r2, #64]	; 0x40
 8000a14:	4b1b      	ldr	r3, [pc, #108]	; (8000a84 <HAL_InitTick+0xa0>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a18:	f003 0310 	and.w	r3, r3, #16
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a20:	f107 0210 	add.w	r2, r7, #16
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	4611      	mov	r1, r2
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 ffcc 	bl	80019c8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a30:	f000 ffb6 	bl	80019a0 <HAL_RCC_GetPCLK1Freq>
 8000a34:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a38:	4a13      	ldr	r2, [pc, #76]	; (8000a88 <HAL_InitTick+0xa4>)
 8000a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a3e:	0c9b      	lsrs	r3, r3, #18
 8000a40:	3b01      	subs	r3, #1
 8000a42:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a44:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <HAL_InitTick+0xa8>)
 8000a46:	4a12      	ldr	r2, [pc, #72]	; (8000a90 <HAL_InitTick+0xac>)
 8000a48:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a4a:	4b10      	ldr	r3, [pc, #64]	; (8000a8c <HAL_InitTick+0xa8>)
 8000a4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a50:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <HAL_InitTick+0xa8>)
 8000a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a56:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <HAL_InitTick+0xa8>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5e:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <HAL_InitTick+0xa8>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000a64:	4809      	ldr	r0, [pc, #36]	; (8000a8c <HAL_InitTick+0xa8>)
 8000a66:	f001 fa25 	bl	8001eb4 <HAL_TIM_Base_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d104      	bne.n	8000a7a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000a70:	4806      	ldr	r0, [pc, #24]	; (8000a8c <HAL_InitTick+0xa8>)
 8000a72:	f001 fa54 	bl	8001f1e <HAL_TIM_Base_Start_IT>
 8000a76:	4603      	mov	r3, r0
 8000a78:	e000      	b.n	8000a7c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3730      	adds	r7, #48	; 0x30
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	40023800 	.word	0x40023800
 8000a88:	431bde83 	.word	0x431bde83
 8000a8c:	20012de8 	.word	0x20012de8
 8000a90:	40001000 	.word	0x40001000

08000a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <NMI_Handler+0x4>

08000a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <HardFault_Handler+0x4>

08000aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <MemManage_Handler+0x4>

08000aa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aaa:	e7fe      	b.n	8000aaa <BusFault_Handler+0x4>

08000aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <UsageFault_Handler+0x4>

08000ab2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr

08000ac0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	f000 fb3f 	bl	8001148 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ad4:	4802      	ldr	r0, [pc, #8]	; (8000ae0 <TIM6_DAC_IRQHandler+0x10>)
 8000ad6:	f001 fa46 	bl	8001f66 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	20012de8 	.word	0x20012de8

08000ae4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ae8:	4b08      	ldr	r3, [pc, #32]	; (8000b0c <SystemInit+0x28>)
 8000aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aee:	4a07      	ldr	r2, [pc, #28]	; (8000b0c <SystemInit+0x28>)
 8000af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000af8:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <SystemInit+0x28>)
 8000afa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000afe:	609a      	str	r2, [r3, #8]
#endif
}
 8000b00:	bf00      	nop
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000b10:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b48 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000b14:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000b16:	e003      	b.n	8000b20 <LoopCopyDataInit>

08000b18 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000b1a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000b1c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000b1e:	3104      	adds	r1, #4

08000b20 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000b20:	480b      	ldr	r0, [pc, #44]	; (8000b50 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000b24:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000b26:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000b28:	d3f6      	bcc.n	8000b18 <CopyDataInit>
  ldr  r2, =_sbss
 8000b2a:	4a0b      	ldr	r2, [pc, #44]	; (8000b58 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000b2c:	e002      	b.n	8000b34 <LoopFillZerobss>

08000b2e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000b2e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000b30:	f842 3b04 	str.w	r3, [r2], #4

08000b34 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000b36:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000b38:	d3f9      	bcc.n	8000b2e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000b3a:	f7ff ffd3 	bl	8000ae4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b3e:	f004 f9bd 	bl	8004ebc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b42:	f7ff fd59 	bl	80005f8 <main>
  bx  lr    
 8000b46:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000b48:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000b4c:	08004f8c 	.word	0x08004f8c
  ldr  r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000b54:	20000010 	.word	0x20000010
  ldr  r2, =_sbss
 8000b58:	20000010 	.word	0x20000010
  ldr  r3, = _ebss
 8000b5c:	20012e6c 	.word	0x20012e6c

08000b60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b60:	e7fe      	b.n	8000b60 <ADC_IRQHandler>
	...

08000b64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b68:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <HAL_Init+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a0d      	ldr	r2, [pc, #52]	; (8000ba4 <HAL_Init+0x40>)
 8000b6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b74:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <HAL_Init+0x40>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a0a      	ldr	r2, [pc, #40]	; (8000ba4 <HAL_Init+0x40>)
 8000b7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b80:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <HAL_Init+0x40>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a07      	ldr	r2, [pc, #28]	; (8000ba4 <HAL_Init+0x40>)
 8000b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b8c:	2003      	movs	r0, #3
 8000b8e:	f000 f8d8 	bl	8000d42 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b92:	2000      	movs	r0, #0
 8000b94:	f7ff ff26 	bl	80009e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b98:	f7ff feb4 	bl	8000904 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b9c:	2300      	movs	r3, #0
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40023c00 	.word	0x40023c00

08000ba8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bac:	4b06      	ldr	r3, [pc, #24]	; (8000bc8 <HAL_IncTick+0x20>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_IncTick+0x24>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <HAL_IncTick+0x24>)
 8000bba:	6013      	str	r3, [r2, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000008 	.word	0x20000008
 8000bcc:	20012e28 	.word	0x20012e28

08000bd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd4:	4b03      	ldr	r3, [pc, #12]	; (8000be4 <HAL_GetTick+0x14>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
}
 8000bd8:	4618      	mov	r0, r3
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	20012e28 	.word	0x20012e28

08000be8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	f003 0307 	and.w	r3, r3, #7
 8000bf6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c04:	4013      	ands	r3, r2
 8000c06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c1a:	4a04      	ldr	r2, [pc, #16]	; (8000c2c <__NVIC_SetPriorityGrouping+0x44>)
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	60d3      	str	r3, [r2, #12]
}
 8000c20:	bf00      	nop
 8000c22:	3714      	adds	r7, #20
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c34:	4b04      	ldr	r3, [pc, #16]	; (8000c48 <__NVIC_GetPriorityGrouping+0x18>)
 8000c36:	68db      	ldr	r3, [r3, #12]
 8000c38:	0a1b      	lsrs	r3, r3, #8
 8000c3a:	f003 0307 	and.w	r3, r3, #7
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b083      	sub	sp, #12
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	4603      	mov	r3, r0
 8000c54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	db0b      	blt.n	8000c76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c5e:	79fb      	ldrb	r3, [r7, #7]
 8000c60:	f003 021f 	and.w	r2, r3, #31
 8000c64:	4907      	ldr	r1, [pc, #28]	; (8000c84 <__NVIC_EnableIRQ+0x38>)
 8000c66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c6a:	095b      	lsrs	r3, r3, #5
 8000c6c:	2001      	movs	r0, #1
 8000c6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c76:	bf00      	nop
 8000c78:	370c      	adds	r7, #12
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	e000e100 	.word	0xe000e100

08000c88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	b083      	sub	sp, #12
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	6039      	str	r1, [r7, #0]
 8000c92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	db0a      	blt.n	8000cb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	b2da      	uxtb	r2, r3
 8000ca0:	490c      	ldr	r1, [pc, #48]	; (8000cd4 <__NVIC_SetPriority+0x4c>)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	0112      	lsls	r2, r2, #4
 8000ca8:	b2d2      	uxtb	r2, r2
 8000caa:	440b      	add	r3, r1
 8000cac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb0:	e00a      	b.n	8000cc8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	b2da      	uxtb	r2, r3
 8000cb6:	4908      	ldr	r1, [pc, #32]	; (8000cd8 <__NVIC_SetPriority+0x50>)
 8000cb8:	79fb      	ldrb	r3, [r7, #7]
 8000cba:	f003 030f 	and.w	r3, r3, #15
 8000cbe:	3b04      	subs	r3, #4
 8000cc0:	0112      	lsls	r2, r2, #4
 8000cc2:	b2d2      	uxtb	r2, r2
 8000cc4:	440b      	add	r3, r1
 8000cc6:	761a      	strb	r2, [r3, #24]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000e100 	.word	0xe000e100
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b089      	sub	sp, #36	; 0x24
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	60b9      	str	r1, [r7, #8]
 8000ce6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f003 0307 	and.w	r3, r3, #7
 8000cee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	f1c3 0307 	rsb	r3, r3, #7
 8000cf6:	2b04      	cmp	r3, #4
 8000cf8:	bf28      	it	cs
 8000cfa:	2304      	movcs	r3, #4
 8000cfc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	3304      	adds	r3, #4
 8000d02:	2b06      	cmp	r3, #6
 8000d04:	d902      	bls.n	8000d0c <NVIC_EncodePriority+0x30>
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3b03      	subs	r3, #3
 8000d0a:	e000      	b.n	8000d0e <NVIC_EncodePriority+0x32>
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	f04f 32ff 	mov.w	r2, #4294967295
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	401a      	ands	r2, r3
 8000d20:	697b      	ldr	r3, [r7, #20]
 8000d22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d24:	f04f 31ff 	mov.w	r1, #4294967295
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2e:	43d9      	mvns	r1, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d34:	4313      	orrs	r3, r2
         );
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3724      	adds	r7, #36	; 0x24
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr

08000d42 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff ff4c 	bl	8000be8 <__NVIC_SetPriorityGrouping>
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}

08000d58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b086      	sub	sp, #24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
 8000d64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d66:	2300      	movs	r3, #0
 8000d68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d6a:	f7ff ff61 	bl	8000c30 <__NVIC_GetPriorityGrouping>
 8000d6e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d70:	687a      	ldr	r2, [r7, #4]
 8000d72:	68b9      	ldr	r1, [r7, #8]
 8000d74:	6978      	ldr	r0, [r7, #20]
 8000d76:	f7ff ffb1 	bl	8000cdc <NVIC_EncodePriority>
 8000d7a:	4602      	mov	r2, r0
 8000d7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d80:	4611      	mov	r1, r2
 8000d82:	4618      	mov	r0, r3
 8000d84:	f7ff ff80 	bl	8000c88 <__NVIC_SetPriority>
}
 8000d88:	bf00      	nop
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}

08000d90 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	4603      	mov	r3, r0
 8000d98:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff ff54 	bl	8000c4c <__NVIC_EnableIRQ>
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b089      	sub	sp, #36	; 0x24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000db6:	2300      	movs	r3, #0
 8000db8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
 8000dc6:	e16b      	b.n	80010a0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000dc8:	2201      	movs	r2, #1
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	697a      	ldr	r2, [r7, #20]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	f040 815a 	bne.w	800109a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d00b      	beq.n	8000e06 <HAL_GPIO_Init+0x5a>
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d007      	beq.n	8000e06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dfa:	2b11      	cmp	r3, #17
 8000dfc:	d003      	beq.n	8000e06 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	2b12      	cmp	r3, #18
 8000e04:	d130      	bne.n	8000e68 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	689b      	ldr	r3, [r3, #8]
 8000e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	2203      	movs	r2, #3
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43db      	mvns	r3, r3
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	68da      	ldr	r2, [r3, #12]
 8000e22:	69fb      	ldr	r3, [r7, #28]
 8000e24:	005b      	lsls	r3, r3, #1
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	fa02 f303 	lsl.w	r3, r2, r3
 8000e44:	43db      	mvns	r3, r3
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	091b      	lsrs	r3, r3, #4
 8000e52:	f003 0201 	and.w	r2, r3, #1
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	2203      	movs	r2, #3
 8000e74:	fa02 f303 	lsl.w	r3, r2, r3
 8000e78:	43db      	mvns	r3, r3
 8000e7a:	69ba      	ldr	r2, [r7, #24]
 8000e7c:	4013      	ands	r3, r2
 8000e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	689a      	ldr	r2, [r3, #8]
 8000e84:	69fb      	ldr	r3, [r7, #28]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	69ba      	ldr	r2, [r7, #24]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d003      	beq.n	8000ea8 <HAL_GPIO_Init+0xfc>
 8000ea0:	683b      	ldr	r3, [r7, #0]
 8000ea2:	685b      	ldr	r3, [r3, #4]
 8000ea4:	2b12      	cmp	r3, #18
 8000ea6:	d123      	bne.n	8000ef0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	08da      	lsrs	r2, r3, #3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3208      	adds	r2, #8
 8000eb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	f003 0307 	and.w	r3, r3, #7
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	220f      	movs	r2, #15
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	691a      	ldr	r2, [r3, #16]
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	009b      	lsls	r3, r3, #2
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	08da      	lsrs	r2, r3, #3
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	3208      	adds	r2, #8
 8000eea:	69b9      	ldr	r1, [r7, #24]
 8000eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ef6:	69fb      	ldr	r3, [r7, #28]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	2203      	movs	r2, #3
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	43db      	mvns	r3, r3
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4013      	ands	r3, r2
 8000f06:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	685b      	ldr	r3, [r3, #4]
 8000f0c:	f003 0203 	and.w	r2, r3, #3
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	005b      	lsls	r3, r3, #1
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	4313      	orrs	r3, r2
 8000f1c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	685b      	ldr	r3, [r3, #4]
 8000f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	f000 80b4 	beq.w	800109a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60fb      	str	r3, [r7, #12]
 8000f36:	4b5f      	ldr	r3, [pc, #380]	; (80010b4 <HAL_GPIO_Init+0x308>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	4a5e      	ldr	r2, [pc, #376]	; (80010b4 <HAL_GPIO_Init+0x308>)
 8000f3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f40:	6453      	str	r3, [r2, #68]	; 0x44
 8000f42:	4b5c      	ldr	r3, [pc, #368]	; (80010b4 <HAL_GPIO_Init+0x308>)
 8000f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f4e:	4a5a      	ldr	r2, [pc, #360]	; (80010b8 <HAL_GPIO_Init+0x30c>)
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	089b      	lsrs	r3, r3, #2
 8000f54:	3302      	adds	r3, #2
 8000f56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	220f      	movs	r2, #15
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	43db      	mvns	r3, r3
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	4013      	ands	r3, r2
 8000f70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a51      	ldr	r2, [pc, #324]	; (80010bc <HAL_GPIO_Init+0x310>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d02b      	beq.n	8000fd2 <HAL_GPIO_Init+0x226>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a50      	ldr	r2, [pc, #320]	; (80010c0 <HAL_GPIO_Init+0x314>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d025      	beq.n	8000fce <HAL_GPIO_Init+0x222>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4f      	ldr	r2, [pc, #316]	; (80010c4 <HAL_GPIO_Init+0x318>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d01f      	beq.n	8000fca <HAL_GPIO_Init+0x21e>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4e      	ldr	r2, [pc, #312]	; (80010c8 <HAL_GPIO_Init+0x31c>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d019      	beq.n	8000fc6 <HAL_GPIO_Init+0x21a>
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4a4d      	ldr	r2, [pc, #308]	; (80010cc <HAL_GPIO_Init+0x320>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d013      	beq.n	8000fc2 <HAL_GPIO_Init+0x216>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4a4c      	ldr	r2, [pc, #304]	; (80010d0 <HAL_GPIO_Init+0x324>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d00d      	beq.n	8000fbe <HAL_GPIO_Init+0x212>
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4a4b      	ldr	r2, [pc, #300]	; (80010d4 <HAL_GPIO_Init+0x328>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d007      	beq.n	8000fba <HAL_GPIO_Init+0x20e>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	4a4a      	ldr	r2, [pc, #296]	; (80010d8 <HAL_GPIO_Init+0x32c>)
 8000fae:	4293      	cmp	r3, r2
 8000fb0:	d101      	bne.n	8000fb6 <HAL_GPIO_Init+0x20a>
 8000fb2:	2307      	movs	r3, #7
 8000fb4:	e00e      	b.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000fb6:	2308      	movs	r3, #8
 8000fb8:	e00c      	b.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000fba:	2306      	movs	r3, #6
 8000fbc:	e00a      	b.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000fbe:	2305      	movs	r3, #5
 8000fc0:	e008      	b.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	e006      	b.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e004      	b.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000fca:	2302      	movs	r3, #2
 8000fcc:	e002      	b.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000fce:	2301      	movs	r3, #1
 8000fd0:	e000      	b.n	8000fd4 <HAL_GPIO_Init+0x228>
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	69fa      	ldr	r2, [r7, #28]
 8000fd6:	f002 0203 	and.w	r2, r2, #3
 8000fda:	0092      	lsls	r2, r2, #2
 8000fdc:	4093      	lsls	r3, r2
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fe4:	4934      	ldr	r1, [pc, #208]	; (80010b8 <HAL_GPIO_Init+0x30c>)
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	089b      	lsrs	r3, r3, #2
 8000fea:	3302      	adds	r3, #2
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ff2:	4b3a      	ldr	r3, [pc, #232]	; (80010dc <HAL_GPIO_Init+0x330>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	4013      	ands	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	685b      	ldr	r3, [r3, #4]
 8001006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800100a:	2b00      	cmp	r3, #0
 800100c:	d003      	beq.n	8001016 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800100e:	69ba      	ldr	r2, [r7, #24]
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	4313      	orrs	r3, r2
 8001014:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001016:	4a31      	ldr	r2, [pc, #196]	; (80010dc <HAL_GPIO_Init+0x330>)
 8001018:	69bb      	ldr	r3, [r7, #24]
 800101a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800101c:	4b2f      	ldr	r3, [pc, #188]	; (80010dc <HAL_GPIO_Init+0x330>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001022:	693b      	ldr	r3, [r7, #16]
 8001024:	43db      	mvns	r3, r3
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	4013      	ands	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001034:	2b00      	cmp	r3, #0
 8001036:	d003      	beq.n	8001040 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001040:	4a26      	ldr	r2, [pc, #152]	; (80010dc <HAL_GPIO_Init+0x330>)
 8001042:	69bb      	ldr	r3, [r7, #24]
 8001044:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001046:	4b25      	ldr	r3, [pc, #148]	; (80010dc <HAL_GPIO_Init+0x330>)
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800104c:	693b      	ldr	r3, [r7, #16]
 800104e:	43db      	mvns	r3, r3
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	4013      	ands	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800105e:	2b00      	cmp	r3, #0
 8001060:	d003      	beq.n	800106a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	693b      	ldr	r3, [r7, #16]
 8001066:	4313      	orrs	r3, r2
 8001068:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800106a:	4a1c      	ldr	r2, [pc, #112]	; (80010dc <HAL_GPIO_Init+0x330>)
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001070:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <HAL_GPIO_Init+0x330>)
 8001072:	68db      	ldr	r3, [r3, #12]
 8001074:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001076:	693b      	ldr	r3, [r7, #16]
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	4313      	orrs	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001094:	4a11      	ldr	r2, [pc, #68]	; (80010dc <HAL_GPIO_Init+0x330>)
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	3301      	adds	r3, #1
 800109e:	61fb      	str	r3, [r7, #28]
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	2b0f      	cmp	r3, #15
 80010a4:	f67f ae90 	bls.w	8000dc8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010a8:	bf00      	nop
 80010aa:	3724      	adds	r7, #36	; 0x24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	40023800 	.word	0x40023800
 80010b8:	40013800 	.word	0x40013800
 80010bc:	40020000 	.word	0x40020000
 80010c0:	40020400 	.word	0x40020400
 80010c4:	40020800 	.word	0x40020800
 80010c8:	40020c00 	.word	0x40020c00
 80010cc:	40021000 	.word	0x40021000
 80010d0:	40021400 	.word	0x40021400
 80010d4:	40021800 	.word	0x40021800
 80010d8:	40021c00 	.word	0x40021c00
 80010dc:	40013c00 	.word	0x40013c00

080010e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	460b      	mov	r3, r1
 80010ea:	807b      	strh	r3, [r7, #2]
 80010ec:	4613      	mov	r3, r2
 80010ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010f0:	787b      	ldrb	r3, [r7, #1]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d003      	beq.n	80010fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010f6:	887a      	ldrh	r2, [r7, #2]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80010fc:	e003      	b.n	8001106 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80010fe:	887b      	ldrh	r3, [r7, #2]
 8001100:	041a      	lsls	r2, r3, #16
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	619a      	str	r2, [r3, #24]
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
 800111a:	460b      	mov	r3, r1
 800111c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	695a      	ldr	r2, [r3, #20]
 8001122:	887b      	ldrh	r3, [r7, #2]
 8001124:	401a      	ands	r2, r3
 8001126:	887b      	ldrh	r3, [r7, #2]
 8001128:	429a      	cmp	r2, r3
 800112a:	d104      	bne.n	8001136 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800112c:	887b      	ldrh	r3, [r7, #2]
 800112e:	041a      	lsls	r2, r3, #16
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001134:	e002      	b.n	800113c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001136:	887a      	ldrh	r2, [r7, #2]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	619a      	str	r2, [r3, #24]
}
 800113c:	bf00      	nop
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	4603      	mov	r3, r0
 8001150:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001152:	4b08      	ldr	r3, [pc, #32]	; (8001174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001154:	695a      	ldr	r2, [r3, #20]
 8001156:	88fb      	ldrh	r3, [r7, #6]
 8001158:	4013      	ands	r3, r2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d006      	beq.n	800116c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001164:	88fb      	ldrh	r3, [r7, #6]
 8001166:	4618      	mov	r0, r3
 8001168:	f7ff fb8c 	bl	8000884 <HAL_GPIO_EXTI_Callback>
  }
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40013c00 	.word	0x40013c00

08001178 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e25b      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	2b00      	cmp	r3, #0
 8001194:	d075      	beq.n	8001282 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001196:	4ba3      	ldr	r3, [pc, #652]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 8001198:	689b      	ldr	r3, [r3, #8]
 800119a:	f003 030c 	and.w	r3, r3, #12
 800119e:	2b04      	cmp	r3, #4
 80011a0:	d00c      	beq.n	80011bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011a2:	4ba0      	ldr	r3, [pc, #640]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80011a4:	689b      	ldr	r3, [r3, #8]
 80011a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80011aa:	2b08      	cmp	r3, #8
 80011ac:	d112      	bne.n	80011d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011ae:	4b9d      	ldr	r3, [pc, #628]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011ba:	d10b      	bne.n	80011d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011bc:	4b99      	ldr	r3, [pc, #612]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d05b      	beq.n	8001280 <HAL_RCC_OscConfig+0x108>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d157      	bne.n	8001280 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e236      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011dc:	d106      	bne.n	80011ec <HAL_RCC_OscConfig+0x74>
 80011de:	4b91      	ldr	r3, [pc, #580]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a90      	ldr	r2, [pc, #576]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80011e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e8:	6013      	str	r3, [r2, #0]
 80011ea:	e01d      	b.n	8001228 <HAL_RCC_OscConfig+0xb0>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80011f4:	d10c      	bne.n	8001210 <HAL_RCC_OscConfig+0x98>
 80011f6:	4b8b      	ldr	r3, [pc, #556]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a8a      	ldr	r2, [pc, #552]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80011fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001200:	6013      	str	r3, [r2, #0]
 8001202:	4b88      	ldr	r3, [pc, #544]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a87      	ldr	r2, [pc, #540]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 8001208:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800120c:	6013      	str	r3, [r2, #0]
 800120e:	e00b      	b.n	8001228 <HAL_RCC_OscConfig+0xb0>
 8001210:	4b84      	ldr	r3, [pc, #528]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	4a83      	ldr	r2, [pc, #524]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 8001216:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800121a:	6013      	str	r3, [r2, #0]
 800121c:	4b81      	ldr	r3, [pc, #516]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a80      	ldr	r2, [pc, #512]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 8001222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001226:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d013      	beq.n	8001258 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001230:	f7ff fcce 	bl	8000bd0 <HAL_GetTick>
 8001234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001236:	e008      	b.n	800124a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001238:	f7ff fcca 	bl	8000bd0 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b64      	cmp	r3, #100	; 0x64
 8001244:	d901      	bls.n	800124a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001246:	2303      	movs	r3, #3
 8001248:	e1fb      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124a:	4b76      	ldr	r3, [pc, #472]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0f0      	beq.n	8001238 <HAL_RCC_OscConfig+0xc0>
 8001256:	e014      	b.n	8001282 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001258:	f7ff fcba 	bl	8000bd0 <HAL_GetTick>
 800125c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001260:	f7ff fcb6 	bl	8000bd0 <HAL_GetTick>
 8001264:	4602      	mov	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b64      	cmp	r3, #100	; 0x64
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e1e7      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001272:	4b6c      	ldr	r3, [pc, #432]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1f0      	bne.n	8001260 <HAL_RCC_OscConfig+0xe8>
 800127e:	e000      	b.n	8001282 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d063      	beq.n	8001356 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800128e:	4b65      	ldr	r3, [pc, #404]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	f003 030c 	and.w	r3, r3, #12
 8001296:	2b00      	cmp	r3, #0
 8001298:	d00b      	beq.n	80012b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800129a:	4b62      	ldr	r3, [pc, #392]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80012a2:	2b08      	cmp	r3, #8
 80012a4:	d11c      	bne.n	80012e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012a6:	4b5f      	ldr	r3, [pc, #380]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d116      	bne.n	80012e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b2:	4b5c      	ldr	r3, [pc, #368]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0302 	and.w	r3, r3, #2
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d005      	beq.n	80012ca <HAL_RCC_OscConfig+0x152>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	68db      	ldr	r3, [r3, #12]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d001      	beq.n	80012ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e1bb      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ca:	4b56      	ldr	r3, [pc, #344]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	691b      	ldr	r3, [r3, #16]
 80012d6:	00db      	lsls	r3, r3, #3
 80012d8:	4952      	ldr	r1, [pc, #328]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80012da:	4313      	orrs	r3, r2
 80012dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012de:	e03a      	b.n	8001356 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d020      	beq.n	800132a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012e8:	4b4f      	ldr	r3, [pc, #316]	; (8001428 <HAL_RCC_OscConfig+0x2b0>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ee:	f7ff fc6f 	bl	8000bd0 <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012f4:	e008      	b.n	8001308 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012f6:	f7ff fc6b 	bl	8000bd0 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	2b02      	cmp	r3, #2
 8001302:	d901      	bls.n	8001308 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	e19c      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001308:	4b46      	ldr	r3, [pc, #280]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0f0      	beq.n	80012f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001314:	4b43      	ldr	r3, [pc, #268]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	691b      	ldr	r3, [r3, #16]
 8001320:	00db      	lsls	r3, r3, #3
 8001322:	4940      	ldr	r1, [pc, #256]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 8001324:	4313      	orrs	r3, r2
 8001326:	600b      	str	r3, [r1, #0]
 8001328:	e015      	b.n	8001356 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800132a:	4b3f      	ldr	r3, [pc, #252]	; (8001428 <HAL_RCC_OscConfig+0x2b0>)
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001330:	f7ff fc4e 	bl	8000bd0 <HAL_GetTick>
 8001334:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001336:	e008      	b.n	800134a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001338:	f7ff fc4a 	bl	8000bd0 <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	2b02      	cmp	r3, #2
 8001344:	d901      	bls.n	800134a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e17b      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800134a:	4b36      	ldr	r3, [pc, #216]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f003 0302 	and.w	r3, r3, #2
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f0      	bne.n	8001338 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	2b00      	cmp	r3, #0
 8001360:	d030      	beq.n	80013c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d016      	beq.n	8001398 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800136a:	4b30      	ldr	r3, [pc, #192]	; (800142c <HAL_RCC_OscConfig+0x2b4>)
 800136c:	2201      	movs	r2, #1
 800136e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001370:	f7ff fc2e 	bl	8000bd0 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001378:	f7ff fc2a 	bl	8000bd0 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e15b      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800138a:	4b26      	ldr	r3, [pc, #152]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 800138c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f0      	beq.n	8001378 <HAL_RCC_OscConfig+0x200>
 8001396:	e015      	b.n	80013c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001398:	4b24      	ldr	r3, [pc, #144]	; (800142c <HAL_RCC_OscConfig+0x2b4>)
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800139e:	f7ff fc17 	bl	8000bd0 <HAL_GetTick>
 80013a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013a4:	e008      	b.n	80013b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80013a6:	f7ff fc13 	bl	8000bd0 <HAL_GetTick>
 80013aa:	4602      	mov	r2, r0
 80013ac:	693b      	ldr	r3, [r7, #16]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	2b02      	cmp	r3, #2
 80013b2:	d901      	bls.n	80013b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80013b4:	2303      	movs	r3, #3
 80013b6:	e144      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013b8:	4b1a      	ldr	r3, [pc, #104]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80013ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013bc:	f003 0302 	and.w	r3, r3, #2
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d1f0      	bne.n	80013a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f003 0304 	and.w	r3, r3, #4
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	f000 80a0 	beq.w	8001512 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013d2:	2300      	movs	r3, #0
 80013d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013d6:	4b13      	ldr	r3, [pc, #76]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d10f      	bne.n	8001402 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	4b0f      	ldr	r3, [pc, #60]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	4a0e      	ldr	r2, [pc, #56]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80013ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013f0:	6413      	str	r3, [r2, #64]	; 0x40
 80013f2:	4b0c      	ldr	r3, [pc, #48]	; (8001424 <HAL_RCC_OscConfig+0x2ac>)
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80013fe:	2301      	movs	r3, #1
 8001400:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001402:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <HAL_RCC_OscConfig+0x2b8>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800140a:	2b00      	cmp	r3, #0
 800140c:	d121      	bne.n	8001452 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800140e:	4b08      	ldr	r3, [pc, #32]	; (8001430 <HAL_RCC_OscConfig+0x2b8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a07      	ldr	r2, [pc, #28]	; (8001430 <HAL_RCC_OscConfig+0x2b8>)
 8001414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001418:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800141a:	f7ff fbd9 	bl	8000bd0 <HAL_GetTick>
 800141e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001420:	e011      	b.n	8001446 <HAL_RCC_OscConfig+0x2ce>
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800
 8001428:	42470000 	.word	0x42470000
 800142c:	42470e80 	.word	0x42470e80
 8001430:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001434:	f7ff fbcc 	bl	8000bd0 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e0fd      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001446:	4b81      	ldr	r3, [pc, #516]	; (800164c <HAL_RCC_OscConfig+0x4d4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800144e:	2b00      	cmp	r3, #0
 8001450:	d0f0      	beq.n	8001434 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d106      	bne.n	8001468 <HAL_RCC_OscConfig+0x2f0>
 800145a:	4b7d      	ldr	r3, [pc, #500]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 800145c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800145e:	4a7c      	ldr	r2, [pc, #496]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6713      	str	r3, [r2, #112]	; 0x70
 8001466:	e01c      	b.n	80014a2 <HAL_RCC_OscConfig+0x32a>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2b05      	cmp	r3, #5
 800146e:	d10c      	bne.n	800148a <HAL_RCC_OscConfig+0x312>
 8001470:	4b77      	ldr	r3, [pc, #476]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 8001472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001474:	4a76      	ldr	r2, [pc, #472]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 8001476:	f043 0304 	orr.w	r3, r3, #4
 800147a:	6713      	str	r3, [r2, #112]	; 0x70
 800147c:	4b74      	ldr	r3, [pc, #464]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 800147e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001480:	4a73      	ldr	r2, [pc, #460]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	6713      	str	r3, [r2, #112]	; 0x70
 8001488:	e00b      	b.n	80014a2 <HAL_RCC_OscConfig+0x32a>
 800148a:	4b71      	ldr	r3, [pc, #452]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 800148c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148e:	4a70      	ldr	r2, [pc, #448]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 8001490:	f023 0301 	bic.w	r3, r3, #1
 8001494:	6713      	str	r3, [r2, #112]	; 0x70
 8001496:	4b6e      	ldr	r3, [pc, #440]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 8001498:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800149a:	4a6d      	ldr	r2, [pc, #436]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 800149c:	f023 0304 	bic.w	r3, r3, #4
 80014a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	689b      	ldr	r3, [r3, #8]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d015      	beq.n	80014d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014aa:	f7ff fb91 	bl	8000bd0 <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014b0:	e00a      	b.n	80014c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014b2:	f7ff fb8d 	bl	8000bd0 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e0bc      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014c8:	4b61      	ldr	r3, [pc, #388]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 80014ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014cc:	f003 0302 	and.w	r3, r3, #2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0ee      	beq.n	80014b2 <HAL_RCC_OscConfig+0x33a>
 80014d4:	e014      	b.n	8001500 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014d6:	f7ff fb7b 	bl	8000bd0 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014dc:	e00a      	b.n	80014f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014de:	f7ff fb77 	bl	8000bd0 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d901      	bls.n	80014f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80014f0:	2303      	movs	r3, #3
 80014f2:	e0a6      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f4:	4b56      	ldr	r3, [pc, #344]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 80014f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1ee      	bne.n	80014de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001500:	7dfb      	ldrb	r3, [r7, #23]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d105      	bne.n	8001512 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001506:	4b52      	ldr	r3, [pc, #328]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 8001508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150a:	4a51      	ldr	r2, [pc, #324]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 800150c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001510:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	2b00      	cmp	r3, #0
 8001518:	f000 8092 	beq.w	8001640 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800151c:	4b4c      	ldr	r3, [pc, #304]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	f003 030c 	and.w	r3, r3, #12
 8001524:	2b08      	cmp	r3, #8
 8001526:	d05c      	beq.n	80015e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	699b      	ldr	r3, [r3, #24]
 800152c:	2b02      	cmp	r3, #2
 800152e:	d141      	bne.n	80015b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001530:	4b48      	ldr	r3, [pc, #288]	; (8001654 <HAL_RCC_OscConfig+0x4dc>)
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001536:	f7ff fb4b 	bl	8000bd0 <HAL_GetTick>
 800153a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800153c:	e008      	b.n	8001550 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800153e:	f7ff fb47 	bl	8000bd0 <HAL_GetTick>
 8001542:	4602      	mov	r2, r0
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	2b02      	cmp	r3, #2
 800154a:	d901      	bls.n	8001550 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800154c:	2303      	movs	r3, #3
 800154e:	e078      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001550:	4b3f      	ldr	r3, [pc, #252]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001558:	2b00      	cmp	r3, #0
 800155a:	d1f0      	bne.n	800153e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	69da      	ldr	r2, [r3, #28]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6a1b      	ldr	r3, [r3, #32]
 8001564:	431a      	orrs	r2, r3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156a:	019b      	lsls	r3, r3, #6
 800156c:	431a      	orrs	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001572:	085b      	lsrs	r3, r3, #1
 8001574:	3b01      	subs	r3, #1
 8001576:	041b      	lsls	r3, r3, #16
 8001578:	431a      	orrs	r2, r3
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800157e:	061b      	lsls	r3, r3, #24
 8001580:	4933      	ldr	r1, [pc, #204]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 8001582:	4313      	orrs	r3, r2
 8001584:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001586:	4b33      	ldr	r3, [pc, #204]	; (8001654 <HAL_RCC_OscConfig+0x4dc>)
 8001588:	2201      	movs	r2, #1
 800158a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fb20 	bl	8000bd0 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001594:	f7ff fb1c 	bl	8000bd0 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b02      	cmp	r3, #2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e04d      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015a6:	4b2a      	ldr	r3, [pc, #168]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0x41c>
 80015b2:	e045      	b.n	8001640 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015b4:	4b27      	ldr	r3, [pc, #156]	; (8001654 <HAL_RCC_OscConfig+0x4dc>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ba:	f7ff fb09 	bl	8000bd0 <HAL_GetTick>
 80015be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015c0:	e008      	b.n	80015d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015c2:	f7ff fb05 	bl	8000bd0 <HAL_GetTick>
 80015c6:	4602      	mov	r2, r0
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d901      	bls.n	80015d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80015d0:	2303      	movs	r3, #3
 80015d2:	e036      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d4:	4b1e      	ldr	r3, [pc, #120]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d1f0      	bne.n	80015c2 <HAL_RCC_OscConfig+0x44a>
 80015e0:	e02e      	b.n	8001640 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d101      	bne.n	80015ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e029      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <HAL_RCC_OscConfig+0x4d8>)
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	69db      	ldr	r3, [r3, #28]
 80015fe:	429a      	cmp	r2, r3
 8001600:	d11c      	bne.n	800163c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800160c:	429a      	cmp	r2, r3
 800160e:	d115      	bne.n	800163c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001616:	4013      	ands	r3, r2
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800161c:	4293      	cmp	r3, r2
 800161e:	d10d      	bne.n	800163c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800162a:	429a      	cmp	r2, r3
 800162c:	d106      	bne.n	800163c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001638:	429a      	cmp	r2, r3
 800163a:	d001      	beq.n	8001640 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e000      	b.n	8001642 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3718      	adds	r7, #24
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40007000 	.word	0x40007000
 8001650:	40023800 	.word	0x40023800
 8001654:	42470060 	.word	0x42470060

08001658 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	e0cc      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800166c:	4b68      	ldr	r3, [pc, #416]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 030f 	and.w	r3, r3, #15
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	429a      	cmp	r2, r3
 8001678:	d90c      	bls.n	8001694 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800167a:	4b65      	ldr	r3, [pc, #404]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001682:	4b63      	ldr	r3, [pc, #396]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 030f 	and.w	r3, r3, #15
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	429a      	cmp	r2, r3
 800168e:	d001      	beq.n	8001694 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001690:	2301      	movs	r3, #1
 8001692:	e0b8      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d020      	beq.n	80016e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0304 	and.w	r3, r3, #4
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016ac:	4b59      	ldr	r3, [pc, #356]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016ae:	689b      	ldr	r3, [r3, #8]
 80016b0:	4a58      	ldr	r2, [pc, #352]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d005      	beq.n	80016d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80016c4:	4b53      	ldr	r3, [pc, #332]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016c6:	689b      	ldr	r3, [r3, #8]
 80016c8:	4a52      	ldr	r2, [pc, #328]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80016ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80016d0:	4b50      	ldr	r3, [pc, #320]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016d2:	689b      	ldr	r3, [r3, #8]
 80016d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	494d      	ldr	r1, [pc, #308]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d044      	beq.n	8001778 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d107      	bne.n	8001706 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016f6:	4b47      	ldr	r3, [pc, #284]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d119      	bne.n	8001736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e07f      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b02      	cmp	r3, #2
 800170c:	d003      	beq.n	8001716 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001712:	2b03      	cmp	r3, #3
 8001714:	d107      	bne.n	8001726 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001716:	4b3f      	ldr	r3, [pc, #252]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171e:	2b00      	cmp	r3, #0
 8001720:	d109      	bne.n	8001736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e06f      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001726:	4b3b      	ldr	r3, [pc, #236]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e067      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001736:	4b37      	ldr	r3, [pc, #220]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	f023 0203 	bic.w	r2, r3, #3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	4934      	ldr	r1, [pc, #208]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 8001744:	4313      	orrs	r3, r2
 8001746:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001748:	f7ff fa42 	bl	8000bd0 <HAL_GetTick>
 800174c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800174e:	e00a      	b.n	8001766 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001750:	f7ff fa3e 	bl	8000bd0 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	f241 3288 	movw	r2, #5000	; 0x1388
 800175e:	4293      	cmp	r3, r2
 8001760:	d901      	bls.n	8001766 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e04f      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001766:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 020c 	and.w	r2, r3, #12
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	429a      	cmp	r2, r3
 8001776:	d1eb      	bne.n	8001750 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001778:	4b25      	ldr	r3, [pc, #148]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 030f 	and.w	r3, r3, #15
 8001780:	683a      	ldr	r2, [r7, #0]
 8001782:	429a      	cmp	r2, r3
 8001784:	d20c      	bcs.n	80017a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001786:	4b22      	ldr	r3, [pc, #136]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 8001788:	683a      	ldr	r2, [r7, #0]
 800178a:	b2d2      	uxtb	r2, r2
 800178c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800178e:	4b20      	ldr	r3, [pc, #128]	; (8001810 <HAL_RCC_ClockConfig+0x1b8>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 030f 	and.w	r3, r3, #15
 8001796:	683a      	ldr	r2, [r7, #0]
 8001798:	429a      	cmp	r2, r3
 800179a:	d001      	beq.n	80017a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e032      	b.n	8001806 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 0304 	and.w	r3, r3, #4
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d008      	beq.n	80017be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017ac:	4b19      	ldr	r3, [pc, #100]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	4916      	ldr	r1, [pc, #88]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0308 	and.w	r3, r3, #8
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d009      	beq.n	80017de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017ca:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	00db      	lsls	r3, r3, #3
 80017d8:	490e      	ldr	r1, [pc, #56]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80017de:	f000 f821 	bl	8001824 <HAL_RCC_GetSysClockFreq>
 80017e2:	4601      	mov	r1, r0
 80017e4:	4b0b      	ldr	r3, [pc, #44]	; (8001814 <HAL_RCC_ClockConfig+0x1bc>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	091b      	lsrs	r3, r3, #4
 80017ea:	f003 030f 	and.w	r3, r3, #15
 80017ee:	4a0a      	ldr	r2, [pc, #40]	; (8001818 <HAL_RCC_ClockConfig+0x1c0>)
 80017f0:	5cd3      	ldrb	r3, [r2, r3]
 80017f2:	fa21 f303 	lsr.w	r3, r1, r3
 80017f6:	4a09      	ldr	r2, [pc, #36]	; (800181c <HAL_RCC_ClockConfig+0x1c4>)
 80017f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <HAL_RCC_ClockConfig+0x1c8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff f8f0 	bl	80009e4 <HAL_InitTick>

  return HAL_OK;
 8001804:	2300      	movs	r3, #0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40023c00 	.word	0x40023c00
 8001814:	40023800 	.word	0x40023800
 8001818:	08004f64 	.word	0x08004f64
 800181c:	20000000 	.word	0x20000000
 8001820:	20000004 	.word	0x20000004

08001824 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001826:	b085      	sub	sp, #20
 8001828:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800182a:	2300      	movs	r3, #0
 800182c:	607b      	str	r3, [r7, #4]
 800182e:	2300      	movs	r3, #0
 8001830:	60fb      	str	r3, [r7, #12]
 8001832:	2300      	movs	r3, #0
 8001834:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001836:	2300      	movs	r3, #0
 8001838:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800183a:	4b50      	ldr	r3, [pc, #320]	; (800197c <HAL_RCC_GetSysClockFreq+0x158>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 030c 	and.w	r3, r3, #12
 8001842:	2b04      	cmp	r3, #4
 8001844:	d007      	beq.n	8001856 <HAL_RCC_GetSysClockFreq+0x32>
 8001846:	2b08      	cmp	r3, #8
 8001848:	d008      	beq.n	800185c <HAL_RCC_GetSysClockFreq+0x38>
 800184a:	2b00      	cmp	r3, #0
 800184c:	f040 808d 	bne.w	800196a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001850:	4b4b      	ldr	r3, [pc, #300]	; (8001980 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001852:	60bb      	str	r3, [r7, #8]
       break;
 8001854:	e08c      	b.n	8001970 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001856:	4b4b      	ldr	r3, [pc, #300]	; (8001984 <HAL_RCC_GetSysClockFreq+0x160>)
 8001858:	60bb      	str	r3, [r7, #8]
      break;
 800185a:	e089      	b.n	8001970 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800185c:	4b47      	ldr	r3, [pc, #284]	; (800197c <HAL_RCC_GetSysClockFreq+0x158>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001864:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001866:	4b45      	ldr	r3, [pc, #276]	; (800197c <HAL_RCC_GetSysClockFreq+0x158>)
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800186e:	2b00      	cmp	r3, #0
 8001870:	d023      	beq.n	80018ba <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001872:	4b42      	ldr	r3, [pc, #264]	; (800197c <HAL_RCC_GetSysClockFreq+0x158>)
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	099b      	lsrs	r3, r3, #6
 8001878:	f04f 0400 	mov.w	r4, #0
 800187c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001880:	f04f 0200 	mov.w	r2, #0
 8001884:	ea03 0501 	and.w	r5, r3, r1
 8001888:	ea04 0602 	and.w	r6, r4, r2
 800188c:	4a3d      	ldr	r2, [pc, #244]	; (8001984 <HAL_RCC_GetSysClockFreq+0x160>)
 800188e:	fb02 f106 	mul.w	r1, r2, r6
 8001892:	2200      	movs	r2, #0
 8001894:	fb02 f205 	mul.w	r2, r2, r5
 8001898:	440a      	add	r2, r1
 800189a:	493a      	ldr	r1, [pc, #232]	; (8001984 <HAL_RCC_GetSysClockFreq+0x160>)
 800189c:	fba5 0101 	umull	r0, r1, r5, r1
 80018a0:	1853      	adds	r3, r2, r1
 80018a2:	4619      	mov	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f04f 0400 	mov.w	r4, #0
 80018aa:	461a      	mov	r2, r3
 80018ac:	4623      	mov	r3, r4
 80018ae:	f7fe fc8f 	bl	80001d0 <__aeabi_uldivmod>
 80018b2:	4603      	mov	r3, r0
 80018b4:	460c      	mov	r4, r1
 80018b6:	60fb      	str	r3, [r7, #12]
 80018b8:	e049      	b.n	800194e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ba:	4b30      	ldr	r3, [pc, #192]	; (800197c <HAL_RCC_GetSysClockFreq+0x158>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	099b      	lsrs	r3, r3, #6
 80018c0:	f04f 0400 	mov.w	r4, #0
 80018c4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	ea03 0501 	and.w	r5, r3, r1
 80018d0:	ea04 0602 	and.w	r6, r4, r2
 80018d4:	4629      	mov	r1, r5
 80018d6:	4632      	mov	r2, r6
 80018d8:	f04f 0300 	mov.w	r3, #0
 80018dc:	f04f 0400 	mov.w	r4, #0
 80018e0:	0154      	lsls	r4, r2, #5
 80018e2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018e6:	014b      	lsls	r3, r1, #5
 80018e8:	4619      	mov	r1, r3
 80018ea:	4622      	mov	r2, r4
 80018ec:	1b49      	subs	r1, r1, r5
 80018ee:	eb62 0206 	sbc.w	r2, r2, r6
 80018f2:	f04f 0300 	mov.w	r3, #0
 80018f6:	f04f 0400 	mov.w	r4, #0
 80018fa:	0194      	lsls	r4, r2, #6
 80018fc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001900:	018b      	lsls	r3, r1, #6
 8001902:	1a5b      	subs	r3, r3, r1
 8001904:	eb64 0402 	sbc.w	r4, r4, r2
 8001908:	f04f 0100 	mov.w	r1, #0
 800190c:	f04f 0200 	mov.w	r2, #0
 8001910:	00e2      	lsls	r2, r4, #3
 8001912:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001916:	00d9      	lsls	r1, r3, #3
 8001918:	460b      	mov	r3, r1
 800191a:	4614      	mov	r4, r2
 800191c:	195b      	adds	r3, r3, r5
 800191e:	eb44 0406 	adc.w	r4, r4, r6
 8001922:	f04f 0100 	mov.w	r1, #0
 8001926:	f04f 0200 	mov.w	r2, #0
 800192a:	02a2      	lsls	r2, r4, #10
 800192c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001930:	0299      	lsls	r1, r3, #10
 8001932:	460b      	mov	r3, r1
 8001934:	4614      	mov	r4, r2
 8001936:	4618      	mov	r0, r3
 8001938:	4621      	mov	r1, r4
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f04f 0400 	mov.w	r4, #0
 8001940:	461a      	mov	r2, r3
 8001942:	4623      	mov	r3, r4
 8001944:	f7fe fc44 	bl	80001d0 <__aeabi_uldivmod>
 8001948:	4603      	mov	r3, r0
 800194a:	460c      	mov	r4, r1
 800194c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800194e:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_RCC_GetSysClockFreq+0x158>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	0c1b      	lsrs	r3, r3, #16
 8001954:	f003 0303 	and.w	r3, r3, #3
 8001958:	3301      	adds	r3, #1
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	fbb2 f3f3 	udiv	r3, r2, r3
 8001966:	60bb      	str	r3, [r7, #8]
      break;
 8001968:	e002      	b.n	8001970 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800196a:	4b05      	ldr	r3, [pc, #20]	; (8001980 <HAL_RCC_GetSysClockFreq+0x15c>)
 800196c:	60bb      	str	r3, [r7, #8]
      break;
 800196e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001970:	68bb      	ldr	r3, [r7, #8]
}
 8001972:	4618      	mov	r0, r3
 8001974:	3714      	adds	r7, #20
 8001976:	46bd      	mov	sp, r7
 8001978:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800
 8001980:	00f42400 	.word	0x00f42400
 8001984:	017d7840 	.word	0x017d7840

08001988 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800198c:	4b03      	ldr	r3, [pc, #12]	; (800199c <HAL_RCC_GetHCLKFreq+0x14>)
 800198e:	681b      	ldr	r3, [r3, #0]
}
 8001990:	4618      	mov	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	20000000 	.word	0x20000000

080019a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80019a4:	f7ff fff0 	bl	8001988 <HAL_RCC_GetHCLKFreq>
 80019a8:	4601      	mov	r1, r0
 80019aa:	4b05      	ldr	r3, [pc, #20]	; (80019c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	0a9b      	lsrs	r3, r3, #10
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	4a03      	ldr	r2, [pc, #12]	; (80019c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019b6:	5cd3      	ldrb	r3, [r2, r3]
 80019b8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80019bc:	4618      	mov	r0, r3
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40023800 	.word	0x40023800
 80019c4:	08004f74 	.word	0x08004f74

080019c8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
 80019d0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	220f      	movs	r2, #15
 80019d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_RCC_GetClockConfig+0x5c>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 0203 	and.w	r2, r3, #3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <HAL_RCC_GetClockConfig+0x5c>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019f0:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <HAL_RCC_GetClockConfig+0x5c>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019fc:	4b09      	ldr	r3, [pc, #36]	; (8001a24 <HAL_RCC_GetClockConfig+0x5c>)
 80019fe:	689b      	ldr	r3, [r3, #8]
 8001a00:	08db      	lsrs	r3, r3, #3
 8001a02:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001a0a:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <HAL_RCC_GetClockConfig+0x60>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 020f 	and.w	r2, r3, #15
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	601a      	str	r2, [r3, #0]
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	40023800 	.word	0x40023800
 8001a28:	40023c00 	.word	0x40023c00

08001a2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e056      	b.n	8001aec <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d106      	bne.n	8001a5e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f7fe ff7b 	bl	8000954 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2202      	movs	r2, #2
 8001a62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001a74:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	431a      	orrs	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	431a      	orrs	r2, r3
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	431a      	orrs	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	699b      	ldr	r3, [r3, #24]
 8001a96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a9a:	431a      	orrs	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	69db      	ldr	r3, [r3, #28]
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6a1b      	ldr	r3, [r3, #32]
 8001aa6:	ea42 0103 	orr.w	r1, r2, r3
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	430a      	orrs	r2, r1
 8001ab4:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	699b      	ldr	r3, [r3, #24]
 8001aba:	0c1b      	lsrs	r3, r3, #16
 8001abc:	f003 0104 	and.w	r1, r3, #4
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	69da      	ldr	r2, [r3, #28]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ada:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3708      	adds	r7, #8
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b088      	sub	sp, #32
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	60f8      	str	r0, [r7, #12]
 8001afc:	60b9      	str	r1, [r7, #8]
 8001afe:	603b      	str	r3, [r7, #0]
 8001b00:	4613      	mov	r3, r2
 8001b02:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d101      	bne.n	8001b16 <HAL_SPI_Transmit+0x22>
 8001b12:	2302      	movs	r3, #2
 8001b14:	e11e      	b.n	8001d54 <HAL_SPI_Transmit+0x260>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2201      	movs	r2, #1
 8001b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b1e:	f7ff f857 	bl	8000bd0 <HAL_GetTick>
 8001b22:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d002      	beq.n	8001b3a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001b34:	2302      	movs	r3, #2
 8001b36:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b38:	e103      	b.n	8001d42 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8001b3a:	68bb      	ldr	r3, [r7, #8]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d002      	beq.n	8001b46 <HAL_SPI_Transmit+0x52>
 8001b40:	88fb      	ldrh	r3, [r7, #6]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d102      	bne.n	8001b4c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001b46:	2301      	movs	r3, #1
 8001b48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001b4a:	e0fa      	b.n	8001d42 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2203      	movs	r2, #3
 8001b50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	2200      	movs	r2, #0
 8001b58:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	68ba      	ldr	r2, [r7, #8]
 8001b5e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	88fa      	ldrh	r2, [r7, #6]
 8001b64:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	88fa      	ldrh	r2, [r7, #6]
 8001b6a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2200      	movs	r2, #0
 8001b76:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	2200      	movs	r2, #0
 8001b82:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b92:	d107      	bne.n	8001ba4 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001ba2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bae:	2b40      	cmp	r3, #64	; 0x40
 8001bb0:	d007      	beq.n	8001bc2 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	68db      	ldr	r3, [r3, #12]
 8001bc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001bca:	d14b      	bne.n	8001c64 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d002      	beq.n	8001bda <HAL_SPI_Transmit+0xe6>
 8001bd4:	8afb      	ldrh	r3, [r7, #22]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d13e      	bne.n	8001c58 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	881a      	ldrh	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	1c9a      	adds	r2, r3, #2
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	b29a      	uxth	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001bfe:	e02b      	b.n	8001c58 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	f003 0302 	and.w	r3, r3, #2
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d112      	bne.n	8001c34 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	881a      	ldrh	r2, [r3, #0]
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	1c9a      	adds	r2, r3, #2
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	b29a      	uxth	r2, r3
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	86da      	strh	r2, [r3, #54]	; 0x36
 8001c32:	e011      	b.n	8001c58 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001c34:	f7fe ffcc 	bl	8000bd0 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d803      	bhi.n	8001c4c <HAL_SPI_Transmit+0x158>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c4a:	d102      	bne.n	8001c52 <HAL_SPI_Transmit+0x15e>
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d102      	bne.n	8001c58 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001c56:	e074      	b.n	8001d42 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d1ce      	bne.n	8001c00 <HAL_SPI_Transmit+0x10c>
 8001c62:	e04c      	b.n	8001cfe <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d002      	beq.n	8001c72 <HAL_SPI_Transmit+0x17e>
 8001c6c:	8afb      	ldrh	r3, [r7, #22]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d140      	bne.n	8001cf4 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	330c      	adds	r3, #12
 8001c7c:	7812      	ldrb	r2, [r2, #0]
 8001c7e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c84:	1c5a      	adds	r2, r3, #1
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001c8e:	b29b      	uxth	r3, r3
 8001c90:	3b01      	subs	r3, #1
 8001c92:	b29a      	uxth	r2, r3
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001c98:	e02c      	b.n	8001cf4 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	689b      	ldr	r3, [r3, #8]
 8001ca0:	f003 0302 	and.w	r3, r3, #2
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d113      	bne.n	8001cd0 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	330c      	adds	r3, #12
 8001cb2:	7812      	ldrb	r2, [r2, #0]
 8001cb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	1c5a      	adds	r2, r3, #1
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cc4:	b29b      	uxth	r3, r3
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	86da      	strh	r2, [r3, #54]	; 0x36
 8001cce:	e011      	b.n	8001cf4 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001cd0:	f7fe ff7e 	bl	8000bd0 <HAL_GetTick>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	d803      	bhi.n	8001ce8 <HAL_SPI_Transmit+0x1f4>
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce6:	d102      	bne.n	8001cee <HAL_SPI_Transmit+0x1fa>
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d102      	bne.n	8001cf4 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001cf2:	e026      	b.n	8001d42 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001cf8:	b29b      	uxth	r3, r3
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1cd      	bne.n	8001c9a <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	6839      	ldr	r1, [r7, #0]
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f000 f894 	bl	8001e30 <SPI_EndRxTxTransaction>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d002      	beq.n	8001d14 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2220      	movs	r2, #32
 8001d12:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10a      	bne.n	8001d32 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	613b      	str	r3, [r7, #16]
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	613b      	str	r3, [r7, #16]
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d002      	beq.n	8001d40 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	77fb      	strb	r3, [r7, #31]
 8001d3e:	e000      	b.n	8001d42 <HAL_SPI_Transmit+0x24e>
  }

error:
 8001d40:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	2201      	movs	r2, #1
 8001d46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001d52:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3720      	adds	r7, #32
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	60f8      	str	r0, [r7, #12]
 8001d64:	60b9      	str	r1, [r7, #8]
 8001d66:	603b      	str	r3, [r7, #0]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001d6c:	e04c      	b.n	8001e08 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d74:	d048      	beq.n	8001e08 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8001d76:	f7fe ff2b 	bl	8000bd0 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	69bb      	ldr	r3, [r7, #24]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d902      	bls.n	8001d8c <SPI_WaitFlagStateUntilTimeout+0x30>
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d13d      	bne.n	8001e08 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	685a      	ldr	r2, [r3, #4]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001d9a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001da4:	d111      	bne.n	8001dca <SPI_WaitFlagStateUntilTimeout+0x6e>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001dae:	d004      	beq.n	8001dba <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db8:	d107      	bne.n	8001dca <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001dc8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dd2:	d10f      	bne.n	8001df4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001df2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001e04:	2303      	movs	r3, #3
 8001e06:	e00f      	b.n	8001e28 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	689a      	ldr	r2, [r3, #8]
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	4013      	ands	r3, r2
 8001e12:	68ba      	ldr	r2, [r7, #8]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	bf0c      	ite	eq
 8001e18:	2301      	moveq	r3, #1
 8001e1a:	2300      	movne	r3, #0
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	461a      	mov	r2, r3
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d1a3      	bne.n	8001d6e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b088      	sub	sp, #32
 8001e34:	af02      	add	r7, sp, #8
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001e3c:	4b1b      	ldr	r3, [pc, #108]	; (8001eac <SPI_EndRxTxTransaction+0x7c>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a1b      	ldr	r2, [pc, #108]	; (8001eb0 <SPI_EndRxTxTransaction+0x80>)
 8001e42:	fba2 2303 	umull	r2, r3, r2, r3
 8001e46:	0d5b      	lsrs	r3, r3, #21
 8001e48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001e4c:	fb02 f303 	mul.w	r3, r2, r3
 8001e50:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001e5a:	d112      	bne.n	8001e82 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	9300      	str	r3, [sp, #0]
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2200      	movs	r2, #0
 8001e64:	2180      	movs	r1, #128	; 0x80
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	f7ff ff78 	bl	8001d5c <SPI_WaitFlagStateUntilTimeout>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d016      	beq.n	8001ea0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e76:	f043 0220 	orr.w	r2, r3, #32
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e00f      	b.n	8001ea2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d00a      	beq.n	8001e9e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e98:	2b80      	cmp	r3, #128	; 0x80
 8001e9a:	d0f2      	beq.n	8001e82 <SPI_EndRxTxTransaction+0x52>
 8001e9c:	e000      	b.n	8001ea0 <SPI_EndRxTxTransaction+0x70>
        break;
 8001e9e:	bf00      	nop
  }

  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3718      	adds	r7, #24
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000000 	.word	0x20000000
 8001eb0:	165e9f81 	.word	0x165e9f81

08001eb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e01d      	b.n	8001f02 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d106      	bne.n	8001ee0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f815 	bl	8001f0a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2202      	movs	r2, #2
 8001ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3304      	adds	r3, #4
 8001ef0:	4619      	mov	r1, r3
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	f000 f968 	bl	80021c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}

08001f0a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001f12:	bf00      	nop
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b085      	sub	sp, #20
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	68da      	ldr	r2, [r3, #12]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f042 0201 	orr.w	r2, r2, #1
 8001f34:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2b06      	cmp	r3, #6
 8001f46:	d007      	beq.n	8001f58 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0201 	orr.w	r2, r2, #1
 8001f56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001f58:	2300      	movs	r3, #0
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3714      	adds	r7, #20
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001f66:	b580      	push	{r7, lr}
 8001f68:	b082      	sub	sp, #8
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	691b      	ldr	r3, [r3, #16]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b02      	cmp	r3, #2
 8001f7a:	d122      	bne.n	8001fc2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d11b      	bne.n	8001fc2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f06f 0202 	mvn.w	r2, #2
 8001f92:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	699b      	ldr	r3, [r3, #24]
 8001fa0:	f003 0303 	and.w	r3, r3, #3
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f000 f8ee 	bl	800218a <HAL_TIM_IC_CaptureCallback>
 8001fae:	e005      	b.n	8001fbc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 f8e0 	bl	8002176 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f8f1 	bl	800219e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	691b      	ldr	r3, [r3, #16]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b04      	cmp	r3, #4
 8001fce:	d122      	bne.n	8002016 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	d11b      	bne.n	8002016 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f06f 0204 	mvn.w	r2, #4
 8001fe6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2202      	movs	r2, #2
 8001fec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	699b      	ldr	r3, [r3, #24]
 8001ff4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ffc:	6878      	ldr	r0, [r7, #4]
 8001ffe:	f000 f8c4 	bl	800218a <HAL_TIM_IC_CaptureCallback>
 8002002:	e005      	b.n	8002010 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f8b6 	bl	8002176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f8c7 	bl	800219e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	f003 0308 	and.w	r3, r3, #8
 8002020:	2b08      	cmp	r3, #8
 8002022:	d122      	bne.n	800206a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	f003 0308 	and.w	r3, r3, #8
 800202e:	2b08      	cmp	r3, #8
 8002030:	d11b      	bne.n	800206a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f06f 0208 	mvn.w	r2, #8
 800203a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2204      	movs	r2, #4
 8002040:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	2b00      	cmp	r3, #0
 800204e:	d003      	beq.n	8002058 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f89a 	bl	800218a <HAL_TIM_IC_CaptureCallback>
 8002056:	e005      	b.n	8002064 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f000 f88c 	bl	8002176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f89d 	bl	800219e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	691b      	ldr	r3, [r3, #16]
 8002070:	f003 0310 	and.w	r3, r3, #16
 8002074:	2b10      	cmp	r3, #16
 8002076:	d122      	bne.n	80020be <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	f003 0310 	and.w	r3, r3, #16
 8002082:	2b10      	cmp	r3, #16
 8002084:	d11b      	bne.n	80020be <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f06f 0210 	mvn.w	r2, #16
 800208e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2208      	movs	r2, #8
 8002094:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f870 	bl	800218a <HAL_TIM_IC_CaptureCallback>
 80020aa:	e005      	b.n	80020b8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 f862 	bl	8002176 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 f873 	bl	800219e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	691b      	ldr	r3, [r3, #16]
 80020c4:	f003 0301 	and.w	r3, r3, #1
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d10e      	bne.n	80020ea <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d107      	bne.n	80020ea <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f06f 0201 	mvn.w	r2, #1
 80020e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	f7fe fbf7 	bl	80008d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	691b      	ldr	r3, [r3, #16]
 80020f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020f4:	2b80      	cmp	r3, #128	; 0x80
 80020f6:	d10e      	bne.n	8002116 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002102:	2b80      	cmp	r3, #128	; 0x80
 8002104:	d107      	bne.n	8002116 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800210e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f000 f903 	bl	800231c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	691b      	ldr	r3, [r3, #16]
 800211c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002120:	2b40      	cmp	r3, #64	; 0x40
 8002122:	d10e      	bne.n	8002142 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212e:	2b40      	cmp	r3, #64	; 0x40
 8002130:	d107      	bne.n	8002142 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800213a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f000 f838 	bl	80021b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	f003 0320 	and.w	r3, r3, #32
 800214c:	2b20      	cmp	r3, #32
 800214e:	d10e      	bne.n	800216e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	f003 0320 	and.w	r3, r3, #32
 800215a:	2b20      	cmp	r3, #32
 800215c:	d107      	bne.n	800216e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f06f 0220 	mvn.w	r2, #32
 8002166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f8cd 	bl	8002308 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800216e:	bf00      	nop
 8002170:	3708      	adds	r7, #8
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}

08002176 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800218a:	b480      	push	{r7}
 800218c:	b083      	sub	sp, #12
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002192:	bf00      	nop
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800219e:	b480      	push	{r7}
 80021a0:	b083      	sub	sp, #12
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr

080021b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021b2:	b480      	push	{r7}
 80021b4:	b083      	sub	sp, #12
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021ba:	bf00      	nop
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a40      	ldr	r2, [pc, #256]	; (80022dc <TIM_Base_SetConfig+0x114>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d013      	beq.n	8002208 <TIM_Base_SetConfig+0x40>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e6:	d00f      	beq.n	8002208 <TIM_Base_SetConfig+0x40>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a3d      	ldr	r2, [pc, #244]	; (80022e0 <TIM_Base_SetConfig+0x118>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d00b      	beq.n	8002208 <TIM_Base_SetConfig+0x40>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a3c      	ldr	r2, [pc, #240]	; (80022e4 <TIM_Base_SetConfig+0x11c>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d007      	beq.n	8002208 <TIM_Base_SetConfig+0x40>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a3b      	ldr	r2, [pc, #236]	; (80022e8 <TIM_Base_SetConfig+0x120>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d003      	beq.n	8002208 <TIM_Base_SetConfig+0x40>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	4a3a      	ldr	r2, [pc, #232]	; (80022ec <TIM_Base_SetConfig+0x124>)
 8002204:	4293      	cmp	r3, r2
 8002206:	d108      	bne.n	800221a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800220e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	68fa      	ldr	r2, [r7, #12]
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a2f      	ldr	r2, [pc, #188]	; (80022dc <TIM_Base_SetConfig+0x114>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d02b      	beq.n	800227a <TIM_Base_SetConfig+0xb2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002228:	d027      	beq.n	800227a <TIM_Base_SetConfig+0xb2>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a2c      	ldr	r2, [pc, #176]	; (80022e0 <TIM_Base_SetConfig+0x118>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d023      	beq.n	800227a <TIM_Base_SetConfig+0xb2>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a2b      	ldr	r2, [pc, #172]	; (80022e4 <TIM_Base_SetConfig+0x11c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d01f      	beq.n	800227a <TIM_Base_SetConfig+0xb2>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a2a      	ldr	r2, [pc, #168]	; (80022e8 <TIM_Base_SetConfig+0x120>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d01b      	beq.n	800227a <TIM_Base_SetConfig+0xb2>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a29      	ldr	r2, [pc, #164]	; (80022ec <TIM_Base_SetConfig+0x124>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d017      	beq.n	800227a <TIM_Base_SetConfig+0xb2>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a28      	ldr	r2, [pc, #160]	; (80022f0 <TIM_Base_SetConfig+0x128>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d013      	beq.n	800227a <TIM_Base_SetConfig+0xb2>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a27      	ldr	r2, [pc, #156]	; (80022f4 <TIM_Base_SetConfig+0x12c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d00f      	beq.n	800227a <TIM_Base_SetConfig+0xb2>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a26      	ldr	r2, [pc, #152]	; (80022f8 <TIM_Base_SetConfig+0x130>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d00b      	beq.n	800227a <TIM_Base_SetConfig+0xb2>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a25      	ldr	r2, [pc, #148]	; (80022fc <TIM_Base_SetConfig+0x134>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d007      	beq.n	800227a <TIM_Base_SetConfig+0xb2>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a24      	ldr	r2, [pc, #144]	; (8002300 <TIM_Base_SetConfig+0x138>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d003      	beq.n	800227a <TIM_Base_SetConfig+0xb2>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	4a23      	ldr	r2, [pc, #140]	; (8002304 <TIM_Base_SetConfig+0x13c>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d108      	bne.n	800228c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002280:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	68fa      	ldr	r2, [r7, #12]
 8002288:	4313      	orrs	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	4313      	orrs	r3, r2
 8002298:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	68fa      	ldr	r2, [r7, #12]
 800229e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	4a0a      	ldr	r2, [pc, #40]	; (80022dc <TIM_Base_SetConfig+0x114>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d003      	beq.n	80022c0 <TIM_Base_SetConfig+0xf8>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	4a0c      	ldr	r2, [pc, #48]	; (80022ec <TIM_Base_SetConfig+0x124>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d103      	bne.n	80022c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	691a      	ldr	r2, [r3, #16]
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	615a      	str	r2, [r3, #20]
}
 80022ce:	bf00      	nop
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	40010000 	.word	0x40010000
 80022e0:	40000400 	.word	0x40000400
 80022e4:	40000800 	.word	0x40000800
 80022e8:	40000c00 	.word	0x40000c00
 80022ec:	40010400 	.word	0x40010400
 80022f0:	40014000 	.word	0x40014000
 80022f4:	40014400 	.word	0x40014400
 80022f8:	40014800 	.word	0x40014800
 80022fc:	40001800 	.word	0x40001800
 8002300:	40001c00 	.word	0x40001c00
 8002304:	40002000 	.word	0x40002000

08002308 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002324:	bf00      	nop
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	f103 0208 	add.w	r2, r3, #8
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f04f 32ff 	mov.w	r2, #4294967295
 8002348:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f103 0208 	add.w	r2, r3, #8
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f103 0208 	add.w	r2, r3, #8
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002370:	b480      	push	{r7}
 8002372:	b083      	sub	sp, #12
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800238a:	b480      	push	{r7}
 800238c:	b085      	sub	sp, #20
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
 8002392:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	689a      	ldr	r2, [r3, #8]
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	683a      	ldr	r2, [r7, #0]
 80023ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	683a      	ldr	r2, [r7, #0]
 80023b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	601a      	str	r2, [r3, #0]
}
 80023c6:	bf00      	nop
 80023c8:	3714      	adds	r7, #20
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023d2:	b480      	push	{r7}
 80023d4:	b085      	sub	sp, #20
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
 80023da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e8:	d103      	bne.n	80023f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	60fb      	str	r3, [r7, #12]
 80023f0:	e00c      	b.n	800240c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	3308      	adds	r3, #8
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	e002      	b.n	8002400 <vListInsert+0x2e>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68ba      	ldr	r2, [r7, #8]
 8002408:	429a      	cmp	r2, r3
 800240a:	d2f6      	bcs.n	80023fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	683a      	ldr	r2, [r7, #0]
 800241a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	68fa      	ldr	r2, [r7, #12]
 8002420:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	1c5a      	adds	r2, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	601a      	str	r2, [r3, #0]
}
 8002438:	bf00      	nop
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002444:	b480      	push	{r7}
 8002446:	b085      	sub	sp, #20
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	6892      	ldr	r2, [r2, #8]
 800245a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6852      	ldr	r2, [r2, #4]
 8002464:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	687a      	ldr	r2, [r7, #4]
 800246c:	429a      	cmp	r2, r3
 800246e:	d103      	bne.n	8002478 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689a      	ldr	r2, [r3, #8]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	1e5a      	subs	r2, r3, #1
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3714      	adds	r7, #20
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d109      	bne.n	80024c0 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80024ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024b0:	f383 8811 	msr	BASEPRI, r3
 80024b4:	f3bf 8f6f 	isb	sy
 80024b8:	f3bf 8f4f 	dsb	sy
 80024bc:	60bb      	str	r3, [r7, #8]
 80024be:	e7fe      	b.n	80024be <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80024c0:	f002 fa0c 	bl	80048dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024cc:	68f9      	ldr	r1, [r7, #12]
 80024ce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80024d0:	fb01 f303 	mul.w	r3, r1, r3
 80024d4:	441a      	add	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	2200      	movs	r2, #0
 80024de:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681a      	ldr	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f0:	3b01      	subs	r3, #1
 80024f2:	68f9      	ldr	r1, [r7, #12]
 80024f4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80024f6:	fb01 f303 	mul.w	r3, r1, r3
 80024fa:	441a      	add	r2, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	22ff      	movs	r2, #255	; 0xff
 8002504:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	22ff      	movs	r2, #255	; 0xff
 800250c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d114      	bne.n	8002540 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d01a      	beq.n	8002554 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	3310      	adds	r3, #16
 8002522:	4618      	mov	r0, r3
 8002524:	f001 f9d6 	bl	80038d4 <xTaskRemoveFromEventList>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d012      	beq.n	8002554 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800252e:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <xQueueGenericReset+0xcc>)
 8002530:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	f3bf 8f4f 	dsb	sy
 800253a:	f3bf 8f6f 	isb	sy
 800253e:	e009      	b.n	8002554 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	3310      	adds	r3, #16
 8002544:	4618      	mov	r0, r3
 8002546:	f7ff fef3 	bl	8002330 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	3324      	adds	r3, #36	; 0x24
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff feee 	bl	8002330 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002554:	f002 f9f0 	bl	8004938 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002558:	2301      	movs	r3, #1
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	e000ed04 	.word	0xe000ed04

08002568 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08a      	sub	sp, #40	; 0x28
 800256c:	af02      	add	r7, sp, #8
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	4613      	mov	r3, r2
 8002574:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d109      	bne.n	8002590 <xQueueGenericCreate+0x28>
 800257c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002580:	f383 8811 	msr	BASEPRI, r3
 8002584:	f3bf 8f6f 	isb	sy
 8002588:	f3bf 8f4f 	dsb	sy
 800258c:	613b      	str	r3, [r7, #16]
 800258e:	e7fe      	b.n	800258e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d102      	bne.n	800259c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002596:	2300      	movs	r3, #0
 8002598:	61fb      	str	r3, [r7, #28]
 800259a:	e004      	b.n	80025a6 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	68ba      	ldr	r2, [r7, #8]
 80025a0:	fb02 f303 	mul.w	r3, r2, r3
 80025a4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3350      	adds	r3, #80	; 0x50
 80025aa:	4618      	mov	r0, r3
 80025ac:	f002 fab0 	bl	8004b10 <pvPortMalloc>
 80025b0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00d      	beq.n	80025d4 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80025b8:	69bb      	ldr	r3, [r7, #24]
 80025ba:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	3350      	adds	r3, #80	; 0x50
 80025c0:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80025c2:	79fa      	ldrb	r2, [r7, #7]
 80025c4:	69bb      	ldr	r3, [r7, #24]
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	4613      	mov	r3, r2
 80025ca:	697a      	ldr	r2, [r7, #20]
 80025cc:	68b9      	ldr	r1, [r7, #8]
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f000 f805 	bl	80025de <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80025d4:	69bb      	ldr	r3, [r7, #24]
	}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3720      	adds	r7, #32
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}

080025de <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80025de:	b580      	push	{r7, lr}
 80025e0:	b084      	sub	sp, #16
 80025e2:	af00      	add	r7, sp, #0
 80025e4:	60f8      	str	r0, [r7, #12]
 80025e6:	60b9      	str	r1, [r7, #8]
 80025e8:	607a      	str	r2, [r7, #4]
 80025ea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d103      	bne.n	80025fa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	e002      	b.n	8002600 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80025fa:	69bb      	ldr	r3, [r7, #24]
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002600:	69bb      	ldr	r3, [r7, #24]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	68ba      	ldr	r2, [r7, #8]
 800260a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800260c:	2101      	movs	r1, #1
 800260e:	69b8      	ldr	r0, [r7, #24]
 8002610:	f7ff ff42 	bl	8002498 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	78fa      	ldrb	r2, [r7, #3]
 8002618:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800261c:	bf00      	nop
 800261e:	3710      	adds	r7, #16
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}

08002624 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08e      	sub	sp, #56	; 0x38
 8002628:	af00      	add	r7, sp, #0
 800262a:	60f8      	str	r0, [r7, #12]
 800262c:	60b9      	str	r1, [r7, #8]
 800262e:	607a      	str	r2, [r7, #4]
 8002630:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002632:	2300      	movs	r3, #0
 8002634:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800263a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263c:	2b00      	cmp	r3, #0
 800263e:	d109      	bne.n	8002654 <xQueueGenericSend+0x30>
 8002640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002644:	f383 8811 	msr	BASEPRI, r3
 8002648:	f3bf 8f6f 	isb	sy
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	62bb      	str	r3, [r7, #40]	; 0x28
 8002652:	e7fe      	b.n	8002652 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d103      	bne.n	8002662 <xQueueGenericSend+0x3e>
 800265a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <xQueueGenericSend+0x42>
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <xQueueGenericSend+0x44>
 8002666:	2300      	movs	r3, #0
 8002668:	2b00      	cmp	r3, #0
 800266a:	d109      	bne.n	8002680 <xQueueGenericSend+0x5c>
 800266c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002670:	f383 8811 	msr	BASEPRI, r3
 8002674:	f3bf 8f6f 	isb	sy
 8002678:	f3bf 8f4f 	dsb	sy
 800267c:	627b      	str	r3, [r7, #36]	; 0x24
 800267e:	e7fe      	b.n	800267e <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d103      	bne.n	800268e <xQueueGenericSend+0x6a>
 8002686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800268a:	2b01      	cmp	r3, #1
 800268c:	d101      	bne.n	8002692 <xQueueGenericSend+0x6e>
 800268e:	2301      	movs	r3, #1
 8002690:	e000      	b.n	8002694 <xQueueGenericSend+0x70>
 8002692:	2300      	movs	r3, #0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d109      	bne.n	80026ac <xQueueGenericSend+0x88>
 8002698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800269c:	f383 8811 	msr	BASEPRI, r3
 80026a0:	f3bf 8f6f 	isb	sy
 80026a4:	f3bf 8f4f 	dsb	sy
 80026a8:	623b      	str	r3, [r7, #32]
 80026aa:	e7fe      	b.n	80026aa <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80026ac:	f001 faaa 	bl	8003c04 <xTaskGetSchedulerState>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d102      	bne.n	80026bc <xQueueGenericSend+0x98>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d101      	bne.n	80026c0 <xQueueGenericSend+0x9c>
 80026bc:	2301      	movs	r3, #1
 80026be:	e000      	b.n	80026c2 <xQueueGenericSend+0x9e>
 80026c0:	2300      	movs	r3, #0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d109      	bne.n	80026da <xQueueGenericSend+0xb6>
 80026c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ca:	f383 8811 	msr	BASEPRI, r3
 80026ce:	f3bf 8f6f 	isb	sy
 80026d2:	f3bf 8f4f 	dsb	sy
 80026d6:	61fb      	str	r3, [r7, #28]
 80026d8:	e7fe      	b.n	80026d8 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80026da:	f002 f8ff 	bl	80048dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80026de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d302      	bcc.n	80026f0 <xQueueGenericSend+0xcc>
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d129      	bne.n	8002744 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80026f0:	683a      	ldr	r2, [r7, #0]
 80026f2:	68b9      	ldr	r1, [r7, #8]
 80026f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80026f6:	f000 fba9 	bl	8002e4c <prvCopyDataToQueue>
 80026fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002700:	2b00      	cmp	r3, #0
 8002702:	d010      	beq.n	8002726 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002706:	3324      	adds	r3, #36	; 0x24
 8002708:	4618      	mov	r0, r3
 800270a:	f001 f8e3 	bl	80038d4 <xTaskRemoveFromEventList>
 800270e:	4603      	mov	r3, r0
 8002710:	2b00      	cmp	r3, #0
 8002712:	d013      	beq.n	800273c <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002714:	4b3f      	ldr	r3, [pc, #252]	; (8002814 <xQueueGenericSend+0x1f0>)
 8002716:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	f3bf 8f4f 	dsb	sy
 8002720:	f3bf 8f6f 	isb	sy
 8002724:	e00a      	b.n	800273c <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002728:	2b00      	cmp	r3, #0
 800272a:	d007      	beq.n	800273c <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800272c:	4b39      	ldr	r3, [pc, #228]	; (8002814 <xQueueGenericSend+0x1f0>)
 800272e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002732:	601a      	str	r2, [r3, #0]
 8002734:	f3bf 8f4f 	dsb	sy
 8002738:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800273c:	f002 f8fc 	bl	8004938 <vPortExitCritical>
				return pdPASS;
 8002740:	2301      	movs	r3, #1
 8002742:	e063      	b.n	800280c <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d103      	bne.n	8002752 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800274a:	f002 f8f5 	bl	8004938 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800274e:	2300      	movs	r3, #0
 8002750:	e05c      	b.n	800280c <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002754:	2b00      	cmp	r3, #0
 8002756:	d106      	bne.n	8002766 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	4618      	mov	r0, r3
 800275e:	f001 f91b 	bl	8003998 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002762:	2301      	movs	r3, #1
 8002764:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002766:	f002 f8e7 	bl	8004938 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800276a:	f000 fe99 	bl	80034a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800276e:	f002 f8b5 	bl	80048dc <vPortEnterCritical>
 8002772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002774:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002778:	b25b      	sxtb	r3, r3
 800277a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800277e:	d103      	bne.n	8002788 <xQueueGenericSend+0x164>
 8002780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002782:	2200      	movs	r2, #0
 8002784:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002788:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800278a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800278e:	b25b      	sxtb	r3, r3
 8002790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002794:	d103      	bne.n	800279e <xQueueGenericSend+0x17a>
 8002796:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800279e:	f002 f8cb 	bl	8004938 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80027a2:	1d3a      	adds	r2, r7, #4
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	4611      	mov	r1, r2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f001 f90a 	bl	80039c4 <xTaskCheckForTimeOut>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d124      	bne.n	8002800 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80027b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027b8:	f000 fc40 	bl	800303c <prvIsQueueFull>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d018      	beq.n	80027f4 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80027c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c4:	3310      	adds	r3, #16
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	4611      	mov	r1, r2
 80027ca:	4618      	mov	r0, r3
 80027cc:	f001 f834 	bl	8003838 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80027d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027d2:	f000 fbcb 	bl	8002f6c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80027d6:	f000 fe71 	bl	80034bc <xTaskResumeAll>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f47f af7c 	bne.w	80026da <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80027e2:	4b0c      	ldr	r3, [pc, #48]	; (8002814 <xQueueGenericSend+0x1f0>)
 80027e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027e8:	601a      	str	r2, [r3, #0]
 80027ea:	f3bf 8f4f 	dsb	sy
 80027ee:	f3bf 8f6f 	isb	sy
 80027f2:	e772      	b.n	80026da <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80027f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80027f6:	f000 fbb9 	bl	8002f6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80027fa:	f000 fe5f 	bl	80034bc <xTaskResumeAll>
 80027fe:	e76c      	b.n	80026da <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002800:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002802:	f000 fbb3 	bl	8002f6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002806:	f000 fe59 	bl	80034bc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800280a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800280c:	4618      	mov	r0, r3
 800280e:	3738      	adds	r7, #56	; 0x38
 8002810:	46bd      	mov	sp, r7
 8002812:	bd80      	pop	{r7, pc}
 8002814:	e000ed04 	.word	0xe000ed04

08002818 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08e      	sub	sp, #56	; 0x38
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800282a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800282c:	2b00      	cmp	r3, #0
 800282e:	d109      	bne.n	8002844 <xQueueGenericSendFromISR+0x2c>
 8002830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002834:	f383 8811 	msr	BASEPRI, r3
 8002838:	f3bf 8f6f 	isb	sy
 800283c:	f3bf 8f4f 	dsb	sy
 8002840:	627b      	str	r3, [r7, #36]	; 0x24
 8002842:	e7fe      	b.n	8002842 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d103      	bne.n	8002852 <xQueueGenericSendFromISR+0x3a>
 800284a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <xQueueGenericSendFromISR+0x3e>
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <xQueueGenericSendFromISR+0x40>
 8002856:	2300      	movs	r3, #0
 8002858:	2b00      	cmp	r3, #0
 800285a:	d109      	bne.n	8002870 <xQueueGenericSendFromISR+0x58>
 800285c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002860:	f383 8811 	msr	BASEPRI, r3
 8002864:	f3bf 8f6f 	isb	sy
 8002868:	f3bf 8f4f 	dsb	sy
 800286c:	623b      	str	r3, [r7, #32]
 800286e:	e7fe      	b.n	800286e <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	2b02      	cmp	r3, #2
 8002874:	d103      	bne.n	800287e <xQueueGenericSendFromISR+0x66>
 8002876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287a:	2b01      	cmp	r3, #1
 800287c:	d101      	bne.n	8002882 <xQueueGenericSendFromISR+0x6a>
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <xQueueGenericSendFromISR+0x6c>
 8002882:	2300      	movs	r3, #0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d109      	bne.n	800289c <xQueueGenericSendFromISR+0x84>
 8002888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800288c:	f383 8811 	msr	BASEPRI, r3
 8002890:	f3bf 8f6f 	isb	sy
 8002894:	f3bf 8f4f 	dsb	sy
 8002898:	61fb      	str	r3, [r7, #28]
 800289a:	e7fe      	b.n	800289a <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800289c:	f002 f8fa 	bl	8004a94 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80028a0:	f3ef 8211 	mrs	r2, BASEPRI
 80028a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a8:	f383 8811 	msr	BASEPRI, r3
 80028ac:	f3bf 8f6f 	isb	sy
 80028b0:	f3bf 8f4f 	dsb	sy
 80028b4:	61ba      	str	r2, [r7, #24]
 80028b6:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80028b8:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80028ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d302      	bcc.n	80028ce <xQueueGenericSendFromISR+0xb6>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d12c      	bne.n	8002928 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80028ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028d8:	683a      	ldr	r2, [r7, #0]
 80028da:	68b9      	ldr	r1, [r7, #8]
 80028dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028de:	f000 fab5 	bl	8002e4c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80028e2:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80028e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ea:	d112      	bne.n	8002912 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d016      	beq.n	8002922 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80028f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f6:	3324      	adds	r3, #36	; 0x24
 80028f8:	4618      	mov	r0, r3
 80028fa:	f000 ffeb 	bl	80038d4 <xTaskRemoveFromEventList>
 80028fe:	4603      	mov	r3, r0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d00e      	beq.n	8002922 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d00b      	beq.n	8002922 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	e007      	b.n	8002922 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002912:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002916:	3301      	adds	r3, #1
 8002918:	b2db      	uxtb	r3, r3
 800291a:	b25a      	sxtb	r2, r3
 800291c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800291e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002922:	2301      	movs	r3, #1
 8002924:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002926:	e001      	b.n	800292c <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002928:	2300      	movs	r3, #0
 800292a:	637b      	str	r3, [r7, #52]	; 0x34
 800292c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800292e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002938:	4618      	mov	r0, r3
 800293a:	3738      	adds	r7, #56	; 0x38
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08e      	sub	sp, #56	; 0x38
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800294e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002950:	2b00      	cmp	r3, #0
 8002952:	d109      	bne.n	8002968 <xQueueGiveFromISR+0x28>
	__asm volatile
 8002954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002958:	f383 8811 	msr	BASEPRI, r3
 800295c:	f3bf 8f6f 	isb	sy
 8002960:	f3bf 8f4f 	dsb	sy
 8002964:	623b      	str	r3, [r7, #32]
 8002966:	e7fe      	b.n	8002966 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800296a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296c:	2b00      	cmp	r3, #0
 800296e:	d009      	beq.n	8002984 <xQueueGiveFromISR+0x44>
 8002970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002974:	f383 8811 	msr	BASEPRI, r3
 8002978:	f3bf 8f6f 	isb	sy
 800297c:	f3bf 8f4f 	dsb	sy
 8002980:	61fb      	str	r3, [r7, #28]
 8002982:	e7fe      	b.n	8002982 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d103      	bne.n	8002994 <xQueueGiveFromISR+0x54>
 800298c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <xQueueGiveFromISR+0x58>
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <xQueueGiveFromISR+0x5a>
 8002998:	2300      	movs	r3, #0
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <xQueueGiveFromISR+0x72>
 800299e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029a2:	f383 8811 	msr	BASEPRI, r3
 80029a6:	f3bf 8f6f 	isb	sy
 80029aa:	f3bf 8f4f 	dsb	sy
 80029ae:	61bb      	str	r3, [r7, #24]
 80029b0:	e7fe      	b.n	80029b0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80029b2:	f002 f86f 	bl	8004a94 <vPortValidateInterruptPriority>
	__asm volatile
 80029b6:	f3ef 8211 	mrs	r2, BASEPRI
 80029ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029be:	f383 8811 	msr	BASEPRI, r3
 80029c2:	f3bf 8f6f 	isb	sy
 80029c6:	f3bf 8f4f 	dsb	sy
 80029ca:	617a      	str	r2, [r7, #20]
 80029cc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80029ce:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80029d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80029d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80029d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80029de:	429a      	cmp	r2, r3
 80029e0:	d22b      	bcs.n	8002a3a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80029e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80029e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80029ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80029f4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80029f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fc:	d112      	bne.n	8002a24 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80029fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d016      	beq.n	8002a34 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a08:	3324      	adds	r3, #36	; 0x24
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f000 ff62 	bl	80038d4 <xTaskRemoveFromEventList>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00e      	beq.n	8002a34 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d00b      	beq.n	8002a34 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	601a      	str	r2, [r3, #0]
 8002a22:	e007      	b.n	8002a34 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002a24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002a28:	3301      	adds	r3, #1
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	b25a      	sxtb	r2, r3
 8002a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002a34:	2301      	movs	r3, #1
 8002a36:	637b      	str	r3, [r7, #52]	; 0x34
 8002a38:	e001      	b.n	8002a3e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	637b      	str	r3, [r7, #52]	; 0x34
 8002a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a40:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3738      	adds	r7, #56	; 0x38
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bd80      	pop	{r7, pc}
	...

08002a54 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08c      	sub	sp, #48	; 0x30
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002a60:	2300      	movs	r3, #0
 8002a62:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d109      	bne.n	8002a82 <xQueueReceive+0x2e>
	__asm volatile
 8002a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a72:	f383 8811 	msr	BASEPRI, r3
 8002a76:	f3bf 8f6f 	isb	sy
 8002a7a:	f3bf 8f4f 	dsb	sy
 8002a7e:	623b      	str	r3, [r7, #32]
 8002a80:	e7fe      	b.n	8002a80 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d103      	bne.n	8002a90 <xQueueReceive+0x3c>
 8002a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <xQueueReceive+0x40>
 8002a90:	2301      	movs	r3, #1
 8002a92:	e000      	b.n	8002a96 <xQueueReceive+0x42>
 8002a94:	2300      	movs	r3, #0
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d109      	bne.n	8002aae <xQueueReceive+0x5a>
 8002a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a9e:	f383 8811 	msr	BASEPRI, r3
 8002aa2:	f3bf 8f6f 	isb	sy
 8002aa6:	f3bf 8f4f 	dsb	sy
 8002aaa:	61fb      	str	r3, [r7, #28]
 8002aac:	e7fe      	b.n	8002aac <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002aae:	f001 f8a9 	bl	8003c04 <xTaskGetSchedulerState>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d102      	bne.n	8002abe <xQueueReceive+0x6a>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d101      	bne.n	8002ac2 <xQueueReceive+0x6e>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <xQueueReceive+0x70>
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d109      	bne.n	8002adc <xQueueReceive+0x88>
 8002ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002acc:	f383 8811 	msr	BASEPRI, r3
 8002ad0:	f3bf 8f6f 	isb	sy
 8002ad4:	f3bf 8f4f 	dsb	sy
 8002ad8:	61bb      	str	r3, [r7, #24]
 8002ada:	e7fe      	b.n	8002ada <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002adc:	f001 fefe 	bl	80048dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d01f      	beq.n	8002b2c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002aec:	68b9      	ldr	r1, [r7, #8]
 8002aee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002af0:	f000 fa16 	bl	8002f20 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af6:	1e5a      	subs	r2, r3, #1
 8002af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afa:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00f      	beq.n	8002b24 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b06:	3310      	adds	r3, #16
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f000 fee3 	bl	80038d4 <xTaskRemoveFromEventList>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d007      	beq.n	8002b24 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002b14:	4b3c      	ldr	r3, [pc, #240]	; (8002c08 <xQueueReceive+0x1b4>)
 8002b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	f3bf 8f4f 	dsb	sy
 8002b20:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002b24:	f001 ff08 	bl	8004938 <vPortExitCritical>
				return pdPASS;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e069      	b.n	8002c00 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d103      	bne.n	8002b3a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b32:	f001 ff01 	bl	8004938 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002b36:	2300      	movs	r3, #0
 8002b38:	e062      	b.n	8002c00 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d106      	bne.n	8002b4e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b40:	f107 0310 	add.w	r3, r7, #16
 8002b44:	4618      	mov	r0, r3
 8002b46:	f000 ff27 	bl	8003998 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b4e:	f001 fef3 	bl	8004938 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b52:	f000 fca5 	bl	80034a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b56:	f001 fec1 	bl	80048dc <vPortEnterCritical>
 8002b5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b60:	b25b      	sxtb	r3, r3
 8002b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b66:	d103      	bne.n	8002b70 <xQueueReceive+0x11c>
 8002b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b76:	b25b      	sxtb	r3, r3
 8002b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7c:	d103      	bne.n	8002b86 <xQueueReceive+0x132>
 8002b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b86:	f001 fed7 	bl	8004938 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b8a:	1d3a      	adds	r2, r7, #4
 8002b8c:	f107 0310 	add.w	r3, r7, #16
 8002b90:	4611      	mov	r1, r2
 8002b92:	4618      	mov	r0, r3
 8002b94:	f000 ff16 	bl	80039c4 <xTaskCheckForTimeOut>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d123      	bne.n	8002be6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b9e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ba0:	f000 fa36 	bl	8003010 <prvIsQueueEmpty>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d017      	beq.n	8002bda <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bac:	3324      	adds	r3, #36	; 0x24
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	4611      	mov	r1, r2
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f000 fe40 	bl	8003838 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002bb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bba:	f000 f9d7 	bl	8002f6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002bbe:	f000 fc7d 	bl	80034bc <xTaskResumeAll>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d189      	bne.n	8002adc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002bc8:	4b0f      	ldr	r3, [pc, #60]	; (8002c08 <xQueueReceive+0x1b4>)
 8002bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	f3bf 8f4f 	dsb	sy
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	e780      	b.n	8002adc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002bda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bdc:	f000 f9c6 	bl	8002f6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002be0:	f000 fc6c 	bl	80034bc <xTaskResumeAll>
 8002be4:	e77a      	b.n	8002adc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002be6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002be8:	f000 f9c0 	bl	8002f6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002bec:	f000 fc66 	bl	80034bc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002bf2:	f000 fa0d 	bl	8003010 <prvIsQueueEmpty>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f43f af6f 	beq.w	8002adc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002bfe:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3730      	adds	r7, #48	; 0x30
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	e000ed04 	.word	0xe000ed04

08002c0c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b08e      	sub	sp, #56	; 0x38
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c16:	2300      	movs	r3, #0
 8002c18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d109      	bne.n	8002c3c <xQueueSemaphoreTake+0x30>
 8002c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c2c:	f383 8811 	msr	BASEPRI, r3
 8002c30:	f3bf 8f6f 	isb	sy
 8002c34:	f3bf 8f4f 	dsb	sy
 8002c38:	623b      	str	r3, [r7, #32]
 8002c3a:	e7fe      	b.n	8002c3a <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d009      	beq.n	8002c58 <xQueueSemaphoreTake+0x4c>
 8002c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c48:	f383 8811 	msr	BASEPRI, r3
 8002c4c:	f3bf 8f6f 	isb	sy
 8002c50:	f3bf 8f4f 	dsb	sy
 8002c54:	61fb      	str	r3, [r7, #28]
 8002c56:	e7fe      	b.n	8002c56 <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c58:	f000 ffd4 	bl	8003c04 <xTaskGetSchedulerState>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d102      	bne.n	8002c68 <xQueueSemaphoreTake+0x5c>
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d101      	bne.n	8002c6c <xQueueSemaphoreTake+0x60>
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e000      	b.n	8002c6e <xQueueSemaphoreTake+0x62>
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d109      	bne.n	8002c86 <xQueueSemaphoreTake+0x7a>
 8002c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c76:	f383 8811 	msr	BASEPRI, r3
 8002c7a:	f3bf 8f6f 	isb	sy
 8002c7e:	f3bf 8f4f 	dsb	sy
 8002c82:	61bb      	str	r3, [r7, #24]
 8002c84:	e7fe      	b.n	8002c84 <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002c86:	f001 fe29 	bl	80048dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002c8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c8e:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d024      	beq.n	8002ce0 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c98:	1e5a      	subs	r2, r3, #1
 8002c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c9c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d104      	bne.n	8002cb0 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002ca6:	f001 f967 	bl	8003f78 <pvTaskIncrementMutexHeldCount>
 8002caa:	4602      	mov	r2, r0
 8002cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cae:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00f      	beq.n	8002cd8 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cba:	3310      	adds	r3, #16
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f000 fe09 	bl	80038d4 <xTaskRemoveFromEventList>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d007      	beq.n	8002cd8 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002cc8:	4b53      	ldr	r3, [pc, #332]	; (8002e18 <xQueueSemaphoreTake+0x20c>)
 8002cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	f3bf 8f4f 	dsb	sy
 8002cd4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002cd8:	f001 fe2e 	bl	8004938 <vPortExitCritical>
				return pdPASS;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e096      	b.n	8002e0e <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d110      	bne.n	8002d08 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d009      	beq.n	8002d00 <xQueueSemaphoreTake+0xf4>
 8002cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cf0:	f383 8811 	msr	BASEPRI, r3
 8002cf4:	f3bf 8f6f 	isb	sy
 8002cf8:	f3bf 8f4f 	dsb	sy
 8002cfc:	617b      	str	r3, [r7, #20]
 8002cfe:	e7fe      	b.n	8002cfe <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002d00:	f001 fe1a 	bl	8004938 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d04:	2300      	movs	r3, #0
 8002d06:	e082      	b.n	8002e0e <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d106      	bne.n	8002d1c <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d0e:	f107 030c 	add.w	r3, r7, #12
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 fe40 	bl	8003998 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d1c:	f001 fe0c 	bl	8004938 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d20:	f000 fbbe 	bl	80034a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d24:	f001 fdda 	bl	80048dc <vPortEnterCritical>
 8002d28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d2e:	b25b      	sxtb	r3, r3
 8002d30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d34:	d103      	bne.n	8002d3e <xQueueSemaphoreTake+0x132>
 8002d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d44:	b25b      	sxtb	r3, r3
 8002d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4a:	d103      	bne.n	8002d54 <xQueueSemaphoreTake+0x148>
 8002d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d54:	f001 fdf0 	bl	8004938 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d58:	463a      	mov	r2, r7
 8002d5a:	f107 030c 	add.w	r3, r7, #12
 8002d5e:	4611      	mov	r1, r2
 8002d60:	4618      	mov	r0, r3
 8002d62:	f000 fe2f 	bl	80039c4 <xTaskCheckForTimeOut>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d132      	bne.n	8002dd2 <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d6e:	f000 f94f 	bl	8003010 <prvIsQueueEmpty>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d026      	beq.n	8002dc6 <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d109      	bne.n	8002d94 <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8002d80:	f001 fdac 	bl	80048dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	4618      	mov	r0, r3
 8002d8a:	f000 ff59 	bl	8003c40 <xTaskPriorityInherit>
 8002d8e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002d90:	f001 fdd2 	bl	8004938 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d96:	3324      	adds	r3, #36	; 0x24
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f000 fd4b 	bl	8003838 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002da2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002da4:	f000 f8e2 	bl	8002f6c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002da8:	f000 fb88 	bl	80034bc <xTaskResumeAll>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	f47f af69 	bne.w	8002c86 <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8002db4:	4b18      	ldr	r3, [pc, #96]	; (8002e18 <xQueueSemaphoreTake+0x20c>)
 8002db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	f3bf 8f4f 	dsb	sy
 8002dc0:	f3bf 8f6f 	isb	sy
 8002dc4:	e75f      	b.n	8002c86 <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002dc6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002dc8:	f000 f8d0 	bl	8002f6c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002dcc:	f000 fb76 	bl	80034bc <xTaskResumeAll>
 8002dd0:	e759      	b.n	8002c86 <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002dd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002dd4:	f000 f8ca 	bl	8002f6c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002dd8:	f000 fb70 	bl	80034bc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ddc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002dde:	f000 f917 	bl	8003010 <prvIsQueueEmpty>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	f43f af4e 	beq.w	8002c86 <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d00d      	beq.n	8002e0c <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8002df0:	f001 fd74 	bl	80048dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002df4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002df6:	f000 f811 	bl	8002e1c <prvGetDisinheritPriorityAfterTimeout>
 8002dfa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e02:	4618      	mov	r0, r3
 8002e04:	f001 f820 	bl	8003e48 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002e08:	f001 fd96 	bl	8004938 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3738      	adds	r7, #56	; 0x38
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	e000ed04 	.word	0xe000ed04

08002e1c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d006      	beq.n	8002e3a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f1c3 0305 	rsb	r3, r3, #5
 8002e36:	60fb      	str	r3, [r7, #12]
 8002e38:	e001      	b.n	8002e3e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
	}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	60f8      	str	r0, [r7, #12]
 8002e54:	60b9      	str	r1, [r7, #8]
 8002e56:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e60:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10d      	bne.n	8002e86 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d14d      	bne.n	8002f0e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 ff62 	bl	8003d40 <xTaskPriorityDisinherit>
 8002e7c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2200      	movs	r2, #0
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	e043      	b.n	8002f0e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d119      	bne.n	8002ec0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6858      	ldr	r0, [r3, #4]
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e94:	461a      	mov	r2, r3
 8002e96:	68b9      	ldr	r1, [r7, #8]
 8002e98:	f002 f834 	bl	8004f04 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	685a      	ldr	r2, [r3, #4]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea4:	441a      	add	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d32b      	bcc.n	8002f0e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	605a      	str	r2, [r3, #4]
 8002ebe:	e026      	b.n	8002f0e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	68d8      	ldr	r0, [r3, #12]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	461a      	mov	r2, r3
 8002eca:	68b9      	ldr	r1, [r7, #8]
 8002ecc:	f002 f81a 	bl	8004f04 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	68da      	ldr	r2, [r3, #12]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	425b      	negs	r3, r3
 8002eda:	441a      	add	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	68da      	ldr	r2, [r3, #12]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d207      	bcs.n	8002efc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef4:	425b      	negs	r3, r3
 8002ef6:	441a      	add	r2, r3
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d105      	bne.n	8002f0e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d002      	beq.n	8002f0e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1c5a      	adds	r2, r3, #1
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002f16:	697b      	ldr	r3, [r7, #20]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3718      	adds	r7, #24
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
 8002f28:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d018      	beq.n	8002f64 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	441a      	add	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68da      	ldr	r2, [r3, #12]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d303      	bcc.n	8002f54 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68d9      	ldr	r1, [r3, #12]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5c:	461a      	mov	r2, r3
 8002f5e:	6838      	ldr	r0, [r7, #0]
 8002f60:	f001 ffd0 	bl	8004f04 <memcpy>
	}
}
 8002f64:	bf00      	nop
 8002f66:	3708      	adds	r7, #8
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002f74:	f001 fcb2 	bl	80048dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f7e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002f80:	e011      	b.n	8002fa6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d012      	beq.n	8002fb0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3324      	adds	r3, #36	; 0x24
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f000 fca0 	bl	80038d4 <xTaskRemoveFromEventList>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d001      	beq.n	8002f9e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002f9a:	f000 fd73 	bl	8003a84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002f9e:	7bfb      	ldrb	r3, [r7, #15]
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002fa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	dce9      	bgt.n	8002f82 <prvUnlockQueue+0x16>
 8002fae:	e000      	b.n	8002fb2 <prvUnlockQueue+0x46>
					break;
 8002fb0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	22ff      	movs	r2, #255	; 0xff
 8002fb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002fba:	f001 fcbd 	bl	8004938 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002fbe:	f001 fc8d 	bl	80048dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002fc8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002fca:	e011      	b.n	8002ff0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	691b      	ldr	r3, [r3, #16]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d012      	beq.n	8002ffa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3310      	adds	r3, #16
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f000 fc7b 	bl	80038d4 <xTaskRemoveFromEventList>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d001      	beq.n	8002fe8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002fe4:	f000 fd4e 	bl	8003a84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002fe8:	7bbb      	ldrb	r3, [r7, #14]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ff0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	dce9      	bgt.n	8002fcc <prvUnlockQueue+0x60>
 8002ff8:	e000      	b.n	8002ffc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002ffa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	22ff      	movs	r2, #255	; 0xff
 8003000:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003004:	f001 fc98 	bl	8004938 <vPortExitCritical>
}
 8003008:	bf00      	nop
 800300a:	3710      	adds	r7, #16
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}

08003010 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b084      	sub	sp, #16
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003018:	f001 fc60 	bl	80048dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003020:	2b00      	cmp	r3, #0
 8003022:	d102      	bne.n	800302a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003024:	2301      	movs	r3, #1
 8003026:	60fb      	str	r3, [r7, #12]
 8003028:	e001      	b.n	800302e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800302e:	f001 fc83 	bl	8004938 <vPortExitCritical>

	return xReturn;
 8003032:	68fb      	ldr	r3, [r7, #12]
}
 8003034:	4618      	mov	r0, r3
 8003036:	3710      	adds	r7, #16
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003044:	f001 fc4a 	bl	80048dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003050:	429a      	cmp	r2, r3
 8003052:	d102      	bne.n	800305a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003054:	2301      	movs	r3, #1
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	e001      	b.n	800305e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800305a:	2300      	movs	r3, #0
 800305c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800305e:	f001 fc6b 	bl	8004938 <vPortExitCritical>

	return xReturn;
 8003062:	68fb      	ldr	r3, [r7, #12]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
 8003074:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003076:	2300      	movs	r3, #0
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	e014      	b.n	80030a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800307c:	4a0e      	ldr	r2, [pc, #56]	; (80030b8 <vQueueAddToRegistry+0x4c>)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10b      	bne.n	80030a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003088:	490b      	ldr	r1, [pc, #44]	; (80030b8 <vQueueAddToRegistry+0x4c>)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003092:	4a09      	ldr	r2, [pc, #36]	; (80030b8 <vQueueAddToRegistry+0x4c>)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	4413      	add	r3, r2
 800309a:	687a      	ldr	r2, [r7, #4]
 800309c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800309e:	e005      	b.n	80030ac <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	3301      	adds	r3, #1
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2b07      	cmp	r3, #7
 80030aa:	d9e7      	bls.n	800307c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80030ac:	bf00      	nop
 80030ae:	3714      	adds	r7, #20
 80030b0:	46bd      	mov	sp, r7
 80030b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b6:	4770      	bx	lr
 80030b8:	20012e2c 	.word	0x20012e2c

080030bc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b086      	sub	sp, #24
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	60b9      	str	r1, [r7, #8]
 80030c6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80030cc:	f001 fc06 	bl	80048dc <vPortEnterCritical>
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030d6:	b25b      	sxtb	r3, r3
 80030d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030dc:	d103      	bne.n	80030e6 <vQueueWaitForMessageRestricted+0x2a>
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030ec:	b25b      	sxtb	r3, r3
 80030ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f2:	d103      	bne.n	80030fc <vQueueWaitForMessageRestricted+0x40>
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030fc:	f001 fc1c 	bl	8004938 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003104:	2b00      	cmp	r3, #0
 8003106:	d106      	bne.n	8003116 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	3324      	adds	r3, #36	; 0x24
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	68b9      	ldr	r1, [r7, #8]
 8003110:	4618      	mov	r0, r3
 8003112:	f000 fbb5 	bl	8003880 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003116:	6978      	ldr	r0, [r7, #20]
 8003118:	f7ff ff28 	bl	8002f6c <prvUnlockQueue>
	}
 800311c:	bf00      	nop
 800311e:	3718      	adds	r7, #24
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003124:	b580      	push	{r7, lr}
 8003126:	b08c      	sub	sp, #48	; 0x30
 8003128:	af04      	add	r7, sp, #16
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	603b      	str	r3, [r7, #0]
 8003130:	4613      	mov	r3, r2
 8003132:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003134:	88fb      	ldrh	r3, [r7, #6]
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4618      	mov	r0, r3
 800313a:	f001 fce9 	bl	8004b10 <pvPortMalloc>
 800313e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003140:	697b      	ldr	r3, [r7, #20]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00e      	beq.n	8003164 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003146:	2058      	movs	r0, #88	; 0x58
 8003148:	f001 fce2 	bl	8004b10 <pvPortMalloc>
 800314c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	697a      	ldr	r2, [r7, #20]
 8003158:	631a      	str	r2, [r3, #48]	; 0x30
 800315a:	e005      	b.n	8003168 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800315c:	6978      	ldr	r0, [r7, #20]
 800315e:	f001 fd99 	bl	8004c94 <vPortFree>
 8003162:	e001      	b.n	8003168 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003164:	2300      	movs	r3, #0
 8003166:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003168:	69fb      	ldr	r3, [r7, #28]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d013      	beq.n	8003196 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800316e:	88fa      	ldrh	r2, [r7, #6]
 8003170:	2300      	movs	r3, #0
 8003172:	9303      	str	r3, [sp, #12]
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	9302      	str	r3, [sp, #8]
 8003178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800317a:	9301      	str	r3, [sp, #4]
 800317c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	68b9      	ldr	r1, [r7, #8]
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 f80e 	bl	80031a6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800318a:	69f8      	ldr	r0, [r7, #28]
 800318c:	f000 f89a 	bl	80032c4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003190:	2301      	movs	r3, #1
 8003192:	61bb      	str	r3, [r7, #24]
 8003194:	e002      	b.n	800319c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003196:	f04f 33ff 	mov.w	r3, #4294967295
 800319a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800319c:	69bb      	ldr	r3, [r7, #24]
	}
 800319e:	4618      	mov	r0, r3
 80031a0:	3720      	adds	r7, #32
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b088      	sub	sp, #32
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	60f8      	str	r0, [r7, #12]
 80031ae:	60b9      	str	r1, [r7, #8]
 80031b0:	607a      	str	r2, [r7, #4]
 80031b2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80031b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	009b      	lsls	r3, r3, #2
 80031bc:	461a      	mov	r2, r3
 80031be:	21a5      	movs	r1, #165	; 0xa5
 80031c0:	f001 feab 	bl	8004f1a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80031c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80031ce:	3b01      	subs	r3, #1
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	f023 0307 	bic.w	r3, r3, #7
 80031dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d009      	beq.n	80031fc <prvInitialiseNewTask+0x56>
 80031e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ec:	f383 8811 	msr	BASEPRI, r3
 80031f0:	f3bf 8f6f 	isb	sy
 80031f4:	f3bf 8f4f 	dsb	sy
 80031f8:	617b      	str	r3, [r7, #20]
 80031fa:	e7fe      	b.n	80031fa <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d01f      	beq.n	8003242 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003202:	2300      	movs	r3, #0
 8003204:	61fb      	str	r3, [r7, #28]
 8003206:	e012      	b.n	800322e <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003208:	68ba      	ldr	r2, [r7, #8]
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	4413      	add	r3, r2
 800320e:	7819      	ldrb	r1, [r3, #0]
 8003210:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003212:	69fb      	ldr	r3, [r7, #28]
 8003214:	4413      	add	r3, r2
 8003216:	3334      	adds	r3, #52	; 0x34
 8003218:	460a      	mov	r2, r1
 800321a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800321c:	68ba      	ldr	r2, [r7, #8]
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	4413      	add	r3, r2
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b00      	cmp	r3, #0
 8003226:	d006      	beq.n	8003236 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	3301      	adds	r3, #1
 800322c:	61fb      	str	r3, [r7, #28]
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	2b09      	cmp	r3, #9
 8003232:	d9e9      	bls.n	8003208 <prvInitialiseNewTask+0x62>
 8003234:	e000      	b.n	8003238 <prvInitialiseNewTask+0x92>
			{
				break;
 8003236:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800323a:	2200      	movs	r2, #0
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003240:	e003      	b.n	800324a <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800324a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324c:	2b04      	cmp	r3, #4
 800324e:	d901      	bls.n	8003254 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003250:	2304      	movs	r3, #4
 8003252:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003256:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003258:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800325a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800325e:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8003260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003262:	2200      	movs	r2, #0
 8003264:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003268:	3304      	adds	r3, #4
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff f880 	bl	8002370 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003272:	3318      	adds	r3, #24
 8003274:	4618      	mov	r0, r3
 8003276:	f7ff f87b 	bl	8002370 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800327a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800327c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800327e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003282:	f1c3 0205 	rsb	r2, r3, #5
 8003286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003288:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800328a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800328e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003292:	2200      	movs	r2, #0
 8003294:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003298:	2200      	movs	r2, #0
 800329a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800329e:	683a      	ldr	r2, [r7, #0]
 80032a0:	68f9      	ldr	r1, [r7, #12]
 80032a2:	69b8      	ldr	r0, [r7, #24]
 80032a4:	f001 f9f0 	bl	8004688 <pxPortInitialiseStack>
 80032a8:	4602      	mov	r2, r0
 80032aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032ac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80032ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d002      	beq.n	80032ba <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80032b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80032ba:	bf00      	nop
 80032bc:	3720      	adds	r7, #32
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
	...

080032c4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b082      	sub	sp, #8
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80032cc:	f001 fb06 	bl	80048dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80032d0:	4b2c      	ldr	r3, [pc, #176]	; (8003384 <prvAddNewTaskToReadyList+0xc0>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	3301      	adds	r3, #1
 80032d6:	4a2b      	ldr	r2, [pc, #172]	; (8003384 <prvAddNewTaskToReadyList+0xc0>)
 80032d8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80032da:	4b2b      	ldr	r3, [pc, #172]	; (8003388 <prvAddNewTaskToReadyList+0xc4>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d109      	bne.n	80032f6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80032e2:	4a29      	ldr	r2, [pc, #164]	; (8003388 <prvAddNewTaskToReadyList+0xc4>)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80032e8:	4b26      	ldr	r3, [pc, #152]	; (8003384 <prvAddNewTaskToReadyList+0xc0>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d110      	bne.n	8003312 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80032f0:	f000 fbec 	bl	8003acc <prvInitialiseTaskLists>
 80032f4:	e00d      	b.n	8003312 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80032f6:	4b25      	ldr	r3, [pc, #148]	; (800338c <prvAddNewTaskToReadyList+0xc8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d109      	bne.n	8003312 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80032fe:	4b22      	ldr	r3, [pc, #136]	; (8003388 <prvAddNewTaskToReadyList+0xc4>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003308:	429a      	cmp	r2, r3
 800330a:	d802      	bhi.n	8003312 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800330c:	4a1e      	ldr	r2, [pc, #120]	; (8003388 <prvAddNewTaskToReadyList+0xc4>)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003312:	4b1f      	ldr	r3, [pc, #124]	; (8003390 <prvAddNewTaskToReadyList+0xcc>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	3301      	adds	r3, #1
 8003318:	4a1d      	ldr	r2, [pc, #116]	; (8003390 <prvAddNewTaskToReadyList+0xcc>)
 800331a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800331c:	4b1c      	ldr	r3, [pc, #112]	; (8003390 <prvAddNewTaskToReadyList+0xcc>)
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	2201      	movs	r2, #1
 800332a:	409a      	lsls	r2, r3
 800332c:	4b19      	ldr	r3, [pc, #100]	; (8003394 <prvAddNewTaskToReadyList+0xd0>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4313      	orrs	r3, r2
 8003332:	4a18      	ldr	r2, [pc, #96]	; (8003394 <prvAddNewTaskToReadyList+0xd0>)
 8003334:	6013      	str	r3, [r2, #0]
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800333a:	4613      	mov	r3, r2
 800333c:	009b      	lsls	r3, r3, #2
 800333e:	4413      	add	r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	4a15      	ldr	r2, [pc, #84]	; (8003398 <prvAddNewTaskToReadyList+0xd4>)
 8003344:	441a      	add	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	3304      	adds	r3, #4
 800334a:	4619      	mov	r1, r3
 800334c:	4610      	mov	r0, r2
 800334e:	f7ff f81c 	bl	800238a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003352:	f001 faf1 	bl	8004938 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003356:	4b0d      	ldr	r3, [pc, #52]	; (800338c <prvAddNewTaskToReadyList+0xc8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00e      	beq.n	800337c <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800335e:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <prvAddNewTaskToReadyList+0xc4>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003368:	429a      	cmp	r2, r3
 800336a:	d207      	bcs.n	800337c <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800336c:	4b0b      	ldr	r3, [pc, #44]	; (800339c <prvAddNewTaskToReadyList+0xd8>)
 800336e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003372:	601a      	str	r2, [r3, #0]
 8003374:	f3bf 8f4f 	dsb	sy
 8003378:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800337c:	bf00      	nop
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	20000104 	.word	0x20000104
 8003388:	2000002c 	.word	0x2000002c
 800338c:	20000110 	.word	0x20000110
 8003390:	20000120 	.word	0x20000120
 8003394:	2000010c 	.word	0x2000010c
 8003398:	20000030 	.word	0x20000030
 800339c:	e000ed04 	.word	0xe000ed04

080033a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80033a8:	2300      	movs	r3, #0
 80033aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d016      	beq.n	80033e0 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80033b2:	4b13      	ldr	r3, [pc, #76]	; (8003400 <vTaskDelay+0x60>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d009      	beq.n	80033ce <vTaskDelay+0x2e>
 80033ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033be:	f383 8811 	msr	BASEPRI, r3
 80033c2:	f3bf 8f6f 	isb	sy
 80033c6:	f3bf 8f4f 	dsb	sy
 80033ca:	60bb      	str	r3, [r7, #8]
 80033cc:	e7fe      	b.n	80033cc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80033ce:	f000 f867 	bl	80034a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80033d2:	2100      	movs	r1, #0
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 fde3 	bl	8003fa0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80033da:	f000 f86f 	bl	80034bc <xTaskResumeAll>
 80033de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d107      	bne.n	80033f6 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 80033e6:	4b07      	ldr	r3, [pc, #28]	; (8003404 <vTaskDelay+0x64>)
 80033e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033ec:	601a      	str	r2, [r3, #0]
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80033f6:	bf00      	nop
 80033f8:	3710      	adds	r7, #16
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	2000012c 	.word	0x2000012c
 8003404:	e000ed04 	.word	0xe000ed04

08003408 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b086      	sub	sp, #24
 800340c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800340e:	4b1e      	ldr	r3, [pc, #120]	; (8003488 <vTaskStartScheduler+0x80>)
 8003410:	9301      	str	r3, [sp, #4]
 8003412:	2300      	movs	r3, #0
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	2300      	movs	r3, #0
 8003418:	2282      	movs	r2, #130	; 0x82
 800341a:	491c      	ldr	r1, [pc, #112]	; (800348c <vTaskStartScheduler+0x84>)
 800341c:	481c      	ldr	r0, [pc, #112]	; (8003490 <vTaskStartScheduler+0x88>)
 800341e:	f7ff fe81 	bl	8003124 <xTaskCreate>
 8003422:	60f8      	str	r0, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2b01      	cmp	r3, #1
 8003428:	d102      	bne.n	8003430 <vTaskStartScheduler+0x28>
		{
			xReturn = xTimerCreateTimerTask();
 800342a:	f000 fe1f 	bl	800406c <xTimerCreateTimerTask>
 800342e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d115      	bne.n	8003462 <vTaskStartScheduler+0x5a>
 8003436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800343a:	f383 8811 	msr	BASEPRI, r3
 800343e:	f3bf 8f6f 	isb	sy
 8003442:	f3bf 8f4f 	dsb	sy
 8003446:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003448:	4b12      	ldr	r3, [pc, #72]	; (8003494 <vTaskStartScheduler+0x8c>)
 800344a:	f04f 32ff 	mov.w	r2, #4294967295
 800344e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003450:	4b11      	ldr	r3, [pc, #68]	; (8003498 <vTaskStartScheduler+0x90>)
 8003452:	2201      	movs	r2, #1
 8003454:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003456:	4b11      	ldr	r3, [pc, #68]	; (800349c <vTaskStartScheduler+0x94>)
 8003458:	2200      	movs	r2, #0
 800345a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800345c:	f001 f9a0 	bl	80047a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003460:	e00d      	b.n	800347e <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003468:	d109      	bne.n	800347e <vTaskStartScheduler+0x76>
 800346a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346e:	f383 8811 	msr	BASEPRI, r3
 8003472:	f3bf 8f6f 	isb	sy
 8003476:	f3bf 8f4f 	dsb	sy
 800347a:	607b      	str	r3, [r7, #4]
 800347c:	e7fe      	b.n	800347c <vTaskStartScheduler+0x74>
}
 800347e:	bf00      	nop
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	20000128 	.word	0x20000128
 800348c:	08004f4c 	.word	0x08004f4c
 8003490:	08003a9d 	.word	0x08003a9d
 8003494:	20000124 	.word	0x20000124
 8003498:	20000110 	.word	0x20000110
 800349c:	20000108 	.word	0x20000108

080034a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80034a4:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <vTaskSuspendAll+0x18>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	3301      	adds	r3, #1
 80034aa:	4a03      	ldr	r2, [pc, #12]	; (80034b8 <vTaskSuspendAll+0x18>)
 80034ac:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80034ae:	bf00      	nop
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	2000012c 	.word	0x2000012c

080034bc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80034c6:	2300      	movs	r3, #0
 80034c8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80034ca:	4b41      	ldr	r3, [pc, #260]	; (80035d0 <xTaskResumeAll+0x114>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d109      	bne.n	80034e6 <xTaskResumeAll+0x2a>
 80034d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d6:	f383 8811 	msr	BASEPRI, r3
 80034da:	f3bf 8f6f 	isb	sy
 80034de:	f3bf 8f4f 	dsb	sy
 80034e2:	603b      	str	r3, [r7, #0]
 80034e4:	e7fe      	b.n	80034e4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80034e6:	f001 f9f9 	bl	80048dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80034ea:	4b39      	ldr	r3, [pc, #228]	; (80035d0 <xTaskResumeAll+0x114>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	4a37      	ldr	r2, [pc, #220]	; (80035d0 <xTaskResumeAll+0x114>)
 80034f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034f4:	4b36      	ldr	r3, [pc, #216]	; (80035d0 <xTaskResumeAll+0x114>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d161      	bne.n	80035c0 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80034fc:	4b35      	ldr	r3, [pc, #212]	; (80035d4 <xTaskResumeAll+0x118>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d05d      	beq.n	80035c0 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003504:	e02e      	b.n	8003564 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003506:	4b34      	ldr	r3, [pc, #208]	; (80035d8 <xTaskResumeAll+0x11c>)
 8003508:	68db      	ldr	r3, [r3, #12]
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	3318      	adds	r3, #24
 8003512:	4618      	mov	r0, r3
 8003514:	f7fe ff96 	bl	8002444 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	3304      	adds	r3, #4
 800351c:	4618      	mov	r0, r3
 800351e:	f7fe ff91 	bl	8002444 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	2201      	movs	r2, #1
 8003528:	409a      	lsls	r2, r3
 800352a:	4b2c      	ldr	r3, [pc, #176]	; (80035dc <xTaskResumeAll+0x120>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4313      	orrs	r3, r2
 8003530:	4a2a      	ldr	r2, [pc, #168]	; (80035dc <xTaskResumeAll+0x120>)
 8003532:	6013      	str	r3, [r2, #0]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003538:	4613      	mov	r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	4413      	add	r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	4a27      	ldr	r2, [pc, #156]	; (80035e0 <xTaskResumeAll+0x124>)
 8003542:	441a      	add	r2, r3
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	3304      	adds	r3, #4
 8003548:	4619      	mov	r1, r3
 800354a:	4610      	mov	r0, r2
 800354c:	f7fe ff1d 	bl	800238a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003554:	4b23      	ldr	r3, [pc, #140]	; (80035e4 <xTaskResumeAll+0x128>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800355a:	429a      	cmp	r2, r3
 800355c:	d302      	bcc.n	8003564 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800355e:	4b22      	ldr	r3, [pc, #136]	; (80035e8 <xTaskResumeAll+0x12c>)
 8003560:	2201      	movs	r2, #1
 8003562:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003564:	4b1c      	ldr	r3, [pc, #112]	; (80035d8 <xTaskResumeAll+0x11c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d1cc      	bne.n	8003506 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003572:	f000 fb27 	bl	8003bc4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003576:	4b1d      	ldr	r3, [pc, #116]	; (80035ec <xTaskResumeAll+0x130>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d010      	beq.n	80035a4 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003582:	f000 f847 	bl	8003614 <xTaskIncrementTick>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d002      	beq.n	8003592 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800358c:	4b16      	ldr	r3, [pc, #88]	; (80035e8 <xTaskResumeAll+0x12c>)
 800358e:	2201      	movs	r2, #1
 8003590:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	3b01      	subs	r3, #1
 8003596:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1f1      	bne.n	8003582 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800359e:	4b13      	ldr	r3, [pc, #76]	; (80035ec <xTaskResumeAll+0x130>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80035a4:	4b10      	ldr	r3, [pc, #64]	; (80035e8 <xTaskResumeAll+0x12c>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d009      	beq.n	80035c0 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80035ac:	2301      	movs	r3, #1
 80035ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80035b0:	4b0f      	ldr	r3, [pc, #60]	; (80035f0 <xTaskResumeAll+0x134>)
 80035b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80035c0:	f001 f9ba 	bl	8004938 <vPortExitCritical>

	return xAlreadyYielded;
 80035c4:	68bb      	ldr	r3, [r7, #8]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	2000012c 	.word	0x2000012c
 80035d4:	20000104 	.word	0x20000104
 80035d8:	200000c4 	.word	0x200000c4
 80035dc:	2000010c 	.word	0x2000010c
 80035e0:	20000030 	.word	0x20000030
 80035e4:	2000002c 	.word	0x2000002c
 80035e8:	20000118 	.word	0x20000118
 80035ec:	20000114 	.word	0x20000114
 80035f0:	e000ed04 	.word	0xe000ed04

080035f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80035fa:	4b05      	ldr	r3, [pc, #20]	; (8003610 <xTaskGetTickCount+0x1c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003600:	687b      	ldr	r3, [r7, #4]
}
 8003602:	4618      	mov	r0, r3
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	20000108 	.word	0x20000108

08003614 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800361a:	2300      	movs	r3, #0
 800361c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800361e:	4b4e      	ldr	r3, [pc, #312]	; (8003758 <xTaskIncrementTick+0x144>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	f040 8087 	bne.w	8003736 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003628:	4b4c      	ldr	r3, [pc, #304]	; (800375c <xTaskIncrementTick+0x148>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	3301      	adds	r3, #1
 800362e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003630:	4a4a      	ldr	r2, [pc, #296]	; (800375c <xTaskIncrementTick+0x148>)
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d11f      	bne.n	800367c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800363c:	4b48      	ldr	r3, [pc, #288]	; (8003760 <xTaskIncrementTick+0x14c>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d009      	beq.n	800365a <xTaskIncrementTick+0x46>
 8003646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800364a:	f383 8811 	msr	BASEPRI, r3
 800364e:	f3bf 8f6f 	isb	sy
 8003652:	f3bf 8f4f 	dsb	sy
 8003656:	603b      	str	r3, [r7, #0]
 8003658:	e7fe      	b.n	8003658 <xTaskIncrementTick+0x44>
 800365a:	4b41      	ldr	r3, [pc, #260]	; (8003760 <xTaskIncrementTick+0x14c>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	4b40      	ldr	r3, [pc, #256]	; (8003764 <xTaskIncrementTick+0x150>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a3e      	ldr	r2, [pc, #248]	; (8003760 <xTaskIncrementTick+0x14c>)
 8003666:	6013      	str	r3, [r2, #0]
 8003668:	4a3e      	ldr	r2, [pc, #248]	; (8003764 <xTaskIncrementTick+0x150>)
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	4b3e      	ldr	r3, [pc, #248]	; (8003768 <xTaskIncrementTick+0x154>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	3301      	adds	r3, #1
 8003674:	4a3c      	ldr	r2, [pc, #240]	; (8003768 <xTaskIncrementTick+0x154>)
 8003676:	6013      	str	r3, [r2, #0]
 8003678:	f000 faa4 	bl	8003bc4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800367c:	4b3b      	ldr	r3, [pc, #236]	; (800376c <xTaskIncrementTick+0x158>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	429a      	cmp	r2, r3
 8003684:	d348      	bcc.n	8003718 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003686:	4b36      	ldr	r3, [pc, #216]	; (8003760 <xTaskIncrementTick+0x14c>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d104      	bne.n	800369a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003690:	4b36      	ldr	r3, [pc, #216]	; (800376c <xTaskIncrementTick+0x158>)
 8003692:	f04f 32ff 	mov.w	r2, #4294967295
 8003696:	601a      	str	r2, [r3, #0]
					break;
 8003698:	e03e      	b.n	8003718 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800369a:	4b31      	ldr	r3, [pc, #196]	; (8003760 <xTaskIncrementTick+0x14c>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d203      	bcs.n	80036ba <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80036b2:	4a2e      	ldr	r2, [pc, #184]	; (800376c <xTaskIncrementTick+0x158>)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80036b8:	e02e      	b.n	8003718 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	3304      	adds	r3, #4
 80036be:	4618      	mov	r0, r3
 80036c0:	f7fe fec0 	bl	8002444 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d004      	beq.n	80036d6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	3318      	adds	r3, #24
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7fe feb7 	bl	8002444 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036da:	2201      	movs	r2, #1
 80036dc:	409a      	lsls	r2, r3
 80036de:	4b24      	ldr	r3, [pc, #144]	; (8003770 <xTaskIncrementTick+0x15c>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	4a22      	ldr	r2, [pc, #136]	; (8003770 <xTaskIncrementTick+0x15c>)
 80036e6:	6013      	str	r3, [r2, #0]
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ec:	4613      	mov	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4a1f      	ldr	r2, [pc, #124]	; (8003774 <xTaskIncrementTick+0x160>)
 80036f6:	441a      	add	r2, r3
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	3304      	adds	r3, #4
 80036fc:	4619      	mov	r1, r3
 80036fe:	4610      	mov	r0, r2
 8003700:	f7fe fe43 	bl	800238a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003708:	4b1b      	ldr	r3, [pc, #108]	; (8003778 <xTaskIncrementTick+0x164>)
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370e:	429a      	cmp	r2, r3
 8003710:	d3b9      	bcc.n	8003686 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8003712:	2301      	movs	r3, #1
 8003714:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003716:	e7b6      	b.n	8003686 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003718:	4b17      	ldr	r3, [pc, #92]	; (8003778 <xTaskIncrementTick+0x164>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800371e:	4915      	ldr	r1, [pc, #84]	; (8003774 <xTaskIncrementTick+0x160>)
 8003720:	4613      	mov	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d907      	bls.n	8003740 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8003730:	2301      	movs	r3, #1
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	e004      	b.n	8003740 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003736:	4b11      	ldr	r3, [pc, #68]	; (800377c <xTaskIncrementTick+0x168>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	3301      	adds	r3, #1
 800373c:	4a0f      	ldr	r2, [pc, #60]	; (800377c <xTaskIncrementTick+0x168>)
 800373e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003740:	4b0f      	ldr	r3, [pc, #60]	; (8003780 <xTaskIncrementTick+0x16c>)
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d001      	beq.n	800374c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8003748:	2301      	movs	r3, #1
 800374a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800374c:	697b      	ldr	r3, [r7, #20]
}
 800374e:	4618      	mov	r0, r3
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	2000012c 	.word	0x2000012c
 800375c:	20000108 	.word	0x20000108
 8003760:	200000bc 	.word	0x200000bc
 8003764:	200000c0 	.word	0x200000c0
 8003768:	2000011c 	.word	0x2000011c
 800376c:	20000124 	.word	0x20000124
 8003770:	2000010c 	.word	0x2000010c
 8003774:	20000030 	.word	0x20000030
 8003778:	2000002c 	.word	0x2000002c
 800377c:	20000114 	.word	0x20000114
 8003780:	20000118 	.word	0x20000118

08003784 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003784:	b480      	push	{r7}
 8003786:	b087      	sub	sp, #28
 8003788:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800378a:	4b26      	ldr	r3, [pc, #152]	; (8003824 <vTaskSwitchContext+0xa0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003792:	4b25      	ldr	r3, [pc, #148]	; (8003828 <vTaskSwitchContext+0xa4>)
 8003794:	2201      	movs	r2, #1
 8003796:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003798:	e03e      	b.n	8003818 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800379a:	4b23      	ldr	r3, [pc, #140]	; (8003828 <vTaskSwitchContext+0xa4>)
 800379c:	2200      	movs	r2, #0
 800379e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037a0:	4b22      	ldr	r3, [pc, #136]	; (800382c <vTaskSwitchContext+0xa8>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	fab3 f383 	clz	r3, r3
 80037ac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80037ae:	7afb      	ldrb	r3, [r7, #11]
 80037b0:	f1c3 031f 	rsb	r3, r3, #31
 80037b4:	617b      	str	r3, [r7, #20]
 80037b6:	491e      	ldr	r1, [pc, #120]	; (8003830 <vTaskSwitchContext+0xac>)
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	4613      	mov	r3, r2
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4413      	add	r3, r2
 80037c0:	009b      	lsls	r3, r3, #2
 80037c2:	440b      	add	r3, r1
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d109      	bne.n	80037de <vTaskSwitchContext+0x5a>
	__asm volatile
 80037ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037ce:	f383 8811 	msr	BASEPRI, r3
 80037d2:	f3bf 8f6f 	isb	sy
 80037d6:	f3bf 8f4f 	dsb	sy
 80037da:	607b      	str	r3, [r7, #4]
 80037dc:	e7fe      	b.n	80037dc <vTaskSwitchContext+0x58>
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	4613      	mov	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	009b      	lsls	r3, r3, #2
 80037e8:	4a11      	ldr	r2, [pc, #68]	; (8003830 <vTaskSwitchContext+0xac>)
 80037ea:	4413      	add	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	605a      	str	r2, [r3, #4]
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	685a      	ldr	r2, [r3, #4]
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	3308      	adds	r3, #8
 8003800:	429a      	cmp	r2, r3
 8003802:	d104      	bne.n	800380e <vTaskSwitchContext+0x8a>
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	685a      	ldr	r2, [r3, #4]
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	605a      	str	r2, [r3, #4]
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	4a07      	ldr	r2, [pc, #28]	; (8003834 <vTaskSwitchContext+0xb0>)
 8003816:	6013      	str	r3, [r2, #0]
}
 8003818:	bf00      	nop
 800381a:	371c      	adds	r7, #28
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	2000012c 	.word	0x2000012c
 8003828:	20000118 	.word	0x20000118
 800382c:	2000010c 	.word	0x2000010c
 8003830:	20000030 	.word	0x20000030
 8003834:	2000002c 	.word	0x2000002c

08003838 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d109      	bne.n	800385c <vTaskPlaceOnEventList+0x24>
 8003848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800384c:	f383 8811 	msr	BASEPRI, r3
 8003850:	f3bf 8f6f 	isb	sy
 8003854:	f3bf 8f4f 	dsb	sy
 8003858:	60fb      	str	r3, [r7, #12]
 800385a:	e7fe      	b.n	800385a <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800385c:	4b07      	ldr	r3, [pc, #28]	; (800387c <vTaskPlaceOnEventList+0x44>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3318      	adds	r3, #24
 8003862:	4619      	mov	r1, r3
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f7fe fdb4 	bl	80023d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800386a:	2101      	movs	r1, #1
 800386c:	6838      	ldr	r0, [r7, #0]
 800386e:	f000 fb97 	bl	8003fa0 <prvAddCurrentTaskToDelayedList>
}
 8003872:	bf00      	nop
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	2000002c 	.word	0x2000002c

08003880 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	60f8      	str	r0, [r7, #12]
 8003888:	60b9      	str	r1, [r7, #8]
 800388a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d109      	bne.n	80038a6 <vTaskPlaceOnEventListRestricted+0x26>
 8003892:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003896:	f383 8811 	msr	BASEPRI, r3
 800389a:	f3bf 8f6f 	isb	sy
 800389e:	f3bf 8f4f 	dsb	sy
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	e7fe      	b.n	80038a4 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80038a6:	4b0a      	ldr	r3, [pc, #40]	; (80038d0 <vTaskPlaceOnEventListRestricted+0x50>)
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	3318      	adds	r3, #24
 80038ac:	4619      	mov	r1, r3
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f7fe fd6b 	bl	800238a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d002      	beq.n	80038c0 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 80038ba:	f04f 33ff 	mov.w	r3, #4294967295
 80038be:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	68b8      	ldr	r0, [r7, #8]
 80038c4:	f000 fb6c 	bl	8003fa0 <prvAddCurrentTaskToDelayedList>
	}
 80038c8:	bf00      	nop
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	2000002c 	.word	0x2000002c

080038d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b086      	sub	sp, #24
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d109      	bne.n	80038fe <xTaskRemoveFromEventList+0x2a>
 80038ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038ee:	f383 8811 	msr	BASEPRI, r3
 80038f2:	f3bf 8f6f 	isb	sy
 80038f6:	f3bf 8f4f 	dsb	sy
 80038fa:	60fb      	str	r3, [r7, #12]
 80038fc:	e7fe      	b.n	80038fc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	3318      	adds	r3, #24
 8003902:	4618      	mov	r0, r3
 8003904:	f7fe fd9e 	bl	8002444 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003908:	4b1d      	ldr	r3, [pc, #116]	; (8003980 <xTaskRemoveFromEventList+0xac>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d11c      	bne.n	800394a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	3304      	adds	r3, #4
 8003914:	4618      	mov	r0, r3
 8003916:	f7fe fd95 	bl	8002444 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391e:	2201      	movs	r2, #1
 8003920:	409a      	lsls	r2, r3
 8003922:	4b18      	ldr	r3, [pc, #96]	; (8003984 <xTaskRemoveFromEventList+0xb0>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4313      	orrs	r3, r2
 8003928:	4a16      	ldr	r2, [pc, #88]	; (8003984 <xTaskRemoveFromEventList+0xb0>)
 800392a:	6013      	str	r3, [r2, #0]
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4a13      	ldr	r2, [pc, #76]	; (8003988 <xTaskRemoveFromEventList+0xb4>)
 800393a:	441a      	add	r2, r3
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	3304      	adds	r3, #4
 8003940:	4619      	mov	r1, r3
 8003942:	4610      	mov	r0, r2
 8003944:	f7fe fd21 	bl	800238a <vListInsertEnd>
 8003948:	e005      	b.n	8003956 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	3318      	adds	r3, #24
 800394e:	4619      	mov	r1, r3
 8003950:	480e      	ldr	r0, [pc, #56]	; (800398c <xTaskRemoveFromEventList+0xb8>)
 8003952:	f7fe fd1a 	bl	800238a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800395a:	4b0d      	ldr	r3, [pc, #52]	; (8003990 <xTaskRemoveFromEventList+0xbc>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	429a      	cmp	r2, r3
 8003962:	d905      	bls.n	8003970 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003964:	2301      	movs	r3, #1
 8003966:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003968:	4b0a      	ldr	r3, [pc, #40]	; (8003994 <xTaskRemoveFromEventList+0xc0>)
 800396a:	2201      	movs	r2, #1
 800396c:	601a      	str	r2, [r3, #0]
 800396e:	e001      	b.n	8003974 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8003970:	2300      	movs	r3, #0
 8003972:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003974:	697b      	ldr	r3, [r7, #20]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop
 8003980:	2000012c 	.word	0x2000012c
 8003984:	2000010c 	.word	0x2000010c
 8003988:	20000030 	.word	0x20000030
 800398c:	200000c4 	.word	0x200000c4
 8003990:	2000002c 	.word	0x2000002c
 8003994:	20000118 	.word	0x20000118

08003998 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003998:	b480      	push	{r7}
 800399a:	b083      	sub	sp, #12
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80039a0:	4b06      	ldr	r3, [pc, #24]	; (80039bc <vTaskInternalSetTimeOutState+0x24>)
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80039a8:	4b05      	ldr	r3, [pc, #20]	; (80039c0 <vTaskInternalSetTimeOutState+0x28>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	605a      	str	r2, [r3, #4]
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	2000011c 	.word	0x2000011c
 80039c0:	20000108 	.word	0x20000108

080039c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b088      	sub	sp, #32
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d109      	bne.n	80039e8 <xTaskCheckForTimeOut+0x24>
 80039d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	613b      	str	r3, [r7, #16]
 80039e6:	e7fe      	b.n	80039e6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d109      	bne.n	8003a02 <xTaskCheckForTimeOut+0x3e>
 80039ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	e7fe      	b.n	8003a00 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003a02:	f000 ff6b 	bl	80048dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003a06:	4b1d      	ldr	r3, [pc, #116]	; (8003a7c <xTaskCheckForTimeOut+0xb8>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a1e:	d102      	bne.n	8003a26 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003a20:	2300      	movs	r3, #0
 8003a22:	61fb      	str	r3, [r7, #28]
 8003a24:	e023      	b.n	8003a6e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	4b15      	ldr	r3, [pc, #84]	; (8003a80 <xTaskCheckForTimeOut+0xbc>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d007      	beq.n	8003a42 <xTaskCheckForTimeOut+0x7e>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d302      	bcc.n	8003a42 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	61fb      	str	r3, [r7, #28]
 8003a40:	e015      	b.n	8003a6e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	697a      	ldr	r2, [r7, #20]
 8003a48:	429a      	cmp	r2, r3
 8003a4a:	d20b      	bcs.n	8003a64 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	1ad2      	subs	r2, r2, r3
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f7ff ff9d 	bl	8003998 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	61fb      	str	r3, [r7, #28]
 8003a62:	e004      	b.n	8003a6e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2200      	movs	r2, #0
 8003a68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003a6e:	f000 ff63 	bl	8004938 <vPortExitCritical>

	return xReturn;
 8003a72:	69fb      	ldr	r3, [r7, #28]
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3720      	adds	r7, #32
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	20000108 	.word	0x20000108
 8003a80:	2000011c 	.word	0x2000011c

08003a84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003a88:	4b03      	ldr	r3, [pc, #12]	; (8003a98 <vTaskMissedYield+0x14>)
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]
}
 8003a8e:	bf00      	nop
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr
 8003a98:	20000118 	.word	0x20000118

08003a9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003aa4:	f000 f852 	bl	8003b4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003aa8:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <prvIdleTask+0x28>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d9f9      	bls.n	8003aa4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003ab0:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <prvIdleTask+0x2c>)
 8003ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003ac0:	e7f0      	b.n	8003aa4 <prvIdleTask+0x8>
 8003ac2:	bf00      	nop
 8003ac4:	20000030 	.word	0x20000030
 8003ac8:	e000ed04 	.word	0xe000ed04

08003acc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	607b      	str	r3, [r7, #4]
 8003ad6:	e00c      	b.n	8003af2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	4613      	mov	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	4413      	add	r3, r2
 8003ae0:	009b      	lsls	r3, r3, #2
 8003ae2:	4a12      	ldr	r2, [pc, #72]	; (8003b2c <prvInitialiseTaskLists+0x60>)
 8003ae4:	4413      	add	r3, r2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f7fe fc22 	bl	8002330 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	3301      	adds	r3, #1
 8003af0:	607b      	str	r3, [r7, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b04      	cmp	r3, #4
 8003af6:	d9ef      	bls.n	8003ad8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003af8:	480d      	ldr	r0, [pc, #52]	; (8003b30 <prvInitialiseTaskLists+0x64>)
 8003afa:	f7fe fc19 	bl	8002330 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003afe:	480d      	ldr	r0, [pc, #52]	; (8003b34 <prvInitialiseTaskLists+0x68>)
 8003b00:	f7fe fc16 	bl	8002330 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003b04:	480c      	ldr	r0, [pc, #48]	; (8003b38 <prvInitialiseTaskLists+0x6c>)
 8003b06:	f7fe fc13 	bl	8002330 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003b0a:	480c      	ldr	r0, [pc, #48]	; (8003b3c <prvInitialiseTaskLists+0x70>)
 8003b0c:	f7fe fc10 	bl	8002330 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003b10:	480b      	ldr	r0, [pc, #44]	; (8003b40 <prvInitialiseTaskLists+0x74>)
 8003b12:	f7fe fc0d 	bl	8002330 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003b16:	4b0b      	ldr	r3, [pc, #44]	; (8003b44 <prvInitialiseTaskLists+0x78>)
 8003b18:	4a05      	ldr	r2, [pc, #20]	; (8003b30 <prvInitialiseTaskLists+0x64>)
 8003b1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003b1c:	4b0a      	ldr	r3, [pc, #40]	; (8003b48 <prvInitialiseTaskLists+0x7c>)
 8003b1e:	4a05      	ldr	r2, [pc, #20]	; (8003b34 <prvInitialiseTaskLists+0x68>)
 8003b20:	601a      	str	r2, [r3, #0]
}
 8003b22:	bf00      	nop
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	20000030 	.word	0x20000030
 8003b30:	20000094 	.word	0x20000094
 8003b34:	200000a8 	.word	0x200000a8
 8003b38:	200000c4 	.word	0x200000c4
 8003b3c:	200000d8 	.word	0x200000d8
 8003b40:	200000f0 	.word	0x200000f0
 8003b44:	200000bc 	.word	0x200000bc
 8003b48:	200000c0 	.word	0x200000c0

08003b4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b52:	e019      	b.n	8003b88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003b54:	f000 fec2 	bl	80048dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b58:	4b0f      	ldr	r3, [pc, #60]	; (8003b98 <prvCheckTasksWaitingTermination+0x4c>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	68db      	ldr	r3, [r3, #12]
 8003b5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3304      	adds	r3, #4
 8003b64:	4618      	mov	r0, r3
 8003b66:	f7fe fc6d 	bl	8002444 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003b6a:	4b0c      	ldr	r3, [pc, #48]	; (8003b9c <prvCheckTasksWaitingTermination+0x50>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	3b01      	subs	r3, #1
 8003b70:	4a0a      	ldr	r2, [pc, #40]	; (8003b9c <prvCheckTasksWaitingTermination+0x50>)
 8003b72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003b74:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <prvCheckTasksWaitingTermination+0x54>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	4a09      	ldr	r2, [pc, #36]	; (8003ba0 <prvCheckTasksWaitingTermination+0x54>)
 8003b7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003b7e:	f000 fedb 	bl	8004938 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f000 f80e 	bl	8003ba4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003b88:	4b05      	ldr	r3, [pc, #20]	; (8003ba0 <prvCheckTasksWaitingTermination+0x54>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d1e1      	bne.n	8003b54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003b90:	bf00      	nop
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	200000d8 	.word	0x200000d8
 8003b9c:	20000104 	.word	0x20000104
 8003ba0:	200000ec 	.word	0x200000ec

08003ba4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b082      	sub	sp, #8
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f001 f86f 	bl	8004c94 <vPortFree>
			vPortFree( pxTCB );
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f001 f86c 	bl	8004c94 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003bbc:	bf00      	nop
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003bca:	4b0c      	ldr	r3, [pc, #48]	; (8003bfc <prvResetNextTaskUnblockTime+0x38>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d104      	bne.n	8003bde <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003bd4:	4b0a      	ldr	r3, [pc, #40]	; (8003c00 <prvResetNextTaskUnblockTime+0x3c>)
 8003bd6:	f04f 32ff 	mov.w	r2, #4294967295
 8003bda:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003bdc:	e008      	b.n	8003bf0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bde:	4b07      	ldr	r3, [pc, #28]	; (8003bfc <prvResetNextTaskUnblockTime+0x38>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	4a04      	ldr	r2, [pc, #16]	; (8003c00 <prvResetNextTaskUnblockTime+0x3c>)
 8003bee:	6013      	str	r3, [r2, #0]
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr
 8003bfc:	200000bc 	.word	0x200000bc
 8003c00:	20000124 	.word	0x20000124

08003c04 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003c0a:	4b0b      	ldr	r3, [pc, #44]	; (8003c38 <xTaskGetSchedulerState+0x34>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d102      	bne.n	8003c18 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003c12:	2301      	movs	r3, #1
 8003c14:	607b      	str	r3, [r7, #4]
 8003c16:	e008      	b.n	8003c2a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c18:	4b08      	ldr	r3, [pc, #32]	; (8003c3c <xTaskGetSchedulerState+0x38>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d102      	bne.n	8003c26 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003c20:	2302      	movs	r3, #2
 8003c22:	607b      	str	r3, [r7, #4]
 8003c24:	e001      	b.n	8003c2a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003c26:	2300      	movs	r3, #0
 8003c28:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003c2a:	687b      	ldr	r3, [r7, #4]
	}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	20000110 	.word	0x20000110
 8003c3c:	2000012c 	.word	0x2000012c

08003c40 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d069      	beq.n	8003d2a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c5a:	4b36      	ldr	r3, [pc, #216]	; (8003d34 <xTaskPriorityInherit+0xf4>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d259      	bcs.n	8003d18 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	db06      	blt.n	8003c7a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003c6c:	4b31      	ldr	r3, [pc, #196]	; (8003d34 <xTaskPriorityInherit+0xf4>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c72:	f1c3 0205 	rsb	r2, r3, #5
 8003c76:	68bb      	ldr	r3, [r7, #8]
 8003c78:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	6959      	ldr	r1, [r3, #20]
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c82:	4613      	mov	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4413      	add	r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	4a2b      	ldr	r2, [pc, #172]	; (8003d38 <xTaskPriorityInherit+0xf8>)
 8003c8c:	4413      	add	r3, r2
 8003c8e:	4299      	cmp	r1, r3
 8003c90:	d13a      	bne.n	8003d08 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	3304      	adds	r3, #4
 8003c96:	4618      	mov	r0, r3
 8003c98:	f7fe fbd4 	bl	8002444 <uxListRemove>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d115      	bne.n	8003cce <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ca6:	4924      	ldr	r1, [pc, #144]	; (8003d38 <xTaskPriorityInherit+0xf8>)
 8003ca8:	4613      	mov	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	4413      	add	r3, r2
 8003cae:	009b      	lsls	r3, r3, #2
 8003cb0:	440b      	add	r3, r1
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10a      	bne.n	8003cce <xTaskPriorityInherit+0x8e>
 8003cb8:	68bb      	ldr	r3, [r7, #8]
 8003cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	43da      	mvns	r2, r3
 8003cc4:	4b1d      	ldr	r3, [pc, #116]	; (8003d3c <xTaskPriorityInherit+0xfc>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	4a1c      	ldr	r2, [pc, #112]	; (8003d3c <xTaskPriorityInherit+0xfc>)
 8003ccc:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003cce:	4b19      	ldr	r3, [pc, #100]	; (8003d34 <xTaskPriorityInherit+0xf4>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cdc:	2201      	movs	r2, #1
 8003cde:	409a      	lsls	r2, r3
 8003ce0:	4b16      	ldr	r3, [pc, #88]	; (8003d3c <xTaskPriorityInherit+0xfc>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	4a15      	ldr	r2, [pc, #84]	; (8003d3c <xTaskPriorityInherit+0xfc>)
 8003ce8:	6013      	str	r3, [r2, #0]
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cee:	4613      	mov	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4413      	add	r3, r2
 8003cf4:	009b      	lsls	r3, r3, #2
 8003cf6:	4a10      	ldr	r2, [pc, #64]	; (8003d38 <xTaskPriorityInherit+0xf8>)
 8003cf8:	441a      	add	r2, r3
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	3304      	adds	r3, #4
 8003cfe:	4619      	mov	r1, r3
 8003d00:	4610      	mov	r0, r2
 8003d02:	f7fe fb42 	bl	800238a <vListInsertEnd>
 8003d06:	e004      	b.n	8003d12 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003d08:	4b0a      	ldr	r3, [pc, #40]	; (8003d34 <xTaskPriorityInherit+0xf4>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003d12:	2301      	movs	r3, #1
 8003d14:	60fb      	str	r3, [r7, #12]
 8003d16:	e008      	b.n	8003d2a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003d18:	68bb      	ldr	r3, [r7, #8]
 8003d1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d1c:	4b05      	ldr	r3, [pc, #20]	; (8003d34 <xTaskPriorityInherit+0xf4>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d22:	429a      	cmp	r2, r3
 8003d24:	d201      	bcs.n	8003d2a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003d26:	2301      	movs	r3, #1
 8003d28:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
	}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3710      	adds	r7, #16
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}
 8003d34:	2000002c 	.word	0x2000002c
 8003d38:	20000030 	.word	0x20000030
 8003d3c:	2000010c 	.word	0x2000010c

08003d40 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d06c      	beq.n	8003e30 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003d56:	4b39      	ldr	r3, [pc, #228]	; (8003e3c <xTaskPriorityDisinherit+0xfc>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	429a      	cmp	r2, r3
 8003d5e:	d009      	beq.n	8003d74 <xTaskPriorityDisinherit+0x34>
 8003d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d64:	f383 8811 	msr	BASEPRI, r3
 8003d68:	f3bf 8f6f 	isb	sy
 8003d6c:	f3bf 8f4f 	dsb	sy
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	e7fe      	b.n	8003d72 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d109      	bne.n	8003d90 <xTaskPriorityDisinherit+0x50>
 8003d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d80:	f383 8811 	msr	BASEPRI, r3
 8003d84:	f3bf 8f6f 	isb	sy
 8003d88:	f3bf 8f4f 	dsb	sy
 8003d8c:	60bb      	str	r3, [r7, #8]
 8003d8e:	e7fe      	b.n	8003d8e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d94:	1e5a      	subs	r2, r3, #1
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	64da      	str	r2, [r3, #76]	; 0x4c

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d044      	beq.n	8003e30 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d140      	bne.n	8003e30 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	3304      	adds	r3, #4
 8003db2:	4618      	mov	r0, r3
 8003db4:	f7fe fb46 	bl	8002444 <uxListRemove>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d115      	bne.n	8003dea <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc2:	491f      	ldr	r1, [pc, #124]	; (8003e40 <xTaskPriorityDisinherit+0x100>)
 8003dc4:	4613      	mov	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	4413      	add	r3, r2
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	440b      	add	r3, r1
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10a      	bne.n	8003dea <xTaskPriorityDisinherit+0xaa>
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd8:	2201      	movs	r2, #1
 8003dda:	fa02 f303 	lsl.w	r3, r2, r3
 8003dde:	43da      	mvns	r2, r3
 8003de0:	4b18      	ldr	r3, [pc, #96]	; (8003e44 <xTaskPriorityDisinherit+0x104>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4013      	ands	r3, r2
 8003de6:	4a17      	ldr	r2, [pc, #92]	; (8003e44 <xTaskPriorityDisinherit+0x104>)
 8003de8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df6:	f1c3 0205 	rsb	r2, r3, #5
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e02:	2201      	movs	r2, #1
 8003e04:	409a      	lsls	r2, r3
 8003e06:	4b0f      	ldr	r3, [pc, #60]	; (8003e44 <xTaskPriorityDisinherit+0x104>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	4a0d      	ldr	r2, [pc, #52]	; (8003e44 <xTaskPriorityDisinherit+0x104>)
 8003e0e:	6013      	str	r3, [r2, #0]
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e14:	4613      	mov	r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	4413      	add	r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	4a08      	ldr	r2, [pc, #32]	; (8003e40 <xTaskPriorityDisinherit+0x100>)
 8003e1e:	441a      	add	r2, r3
 8003e20:	693b      	ldr	r3, [r7, #16]
 8003e22:	3304      	adds	r3, #4
 8003e24:	4619      	mov	r1, r3
 8003e26:	4610      	mov	r0, r2
 8003e28:	f7fe faaf 	bl	800238a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003e30:	697b      	ldr	r3, [r7, #20]
	}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3718      	adds	r7, #24
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	2000002c 	.word	0x2000002c
 8003e40:	20000030 	.word	0x20000030
 8003e44:	2000010c 	.word	0x2000010c

08003e48 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b088      	sub	sp, #32
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003e56:	2301      	movs	r3, #1
 8003e58:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f000 8081 	beq.w	8003f64 <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d109      	bne.n	8003e7e <vTaskPriorityDisinheritAfterTimeout+0x36>
 8003e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6e:	f383 8811 	msr	BASEPRI, r3
 8003e72:	f3bf 8f6f 	isb	sy
 8003e76:	f3bf 8f4f 	dsb	sy
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	e7fe      	b.n	8003e7c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d902      	bls.n	8003e8e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	61fb      	str	r3, [r7, #28]
 8003e8c:	e002      	b.n	8003e94 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003e8e:	69bb      	ldr	r3, [r7, #24]
 8003e90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e92:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e98:	69fa      	ldr	r2, [r7, #28]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	d062      	beq.n	8003f64 <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003e9e:	69bb      	ldr	r3, [r7, #24]
 8003ea0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ea2:	697a      	ldr	r2, [r7, #20]
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d15d      	bne.n	8003f64 <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003ea8:	4b30      	ldr	r3, [pc, #192]	; (8003f6c <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d109      	bne.n	8003ec6 <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8003eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb6:	f383 8811 	msr	BASEPRI, r3
 8003eba:	f3bf 8f6f 	isb	sy
 8003ebe:	f3bf 8f4f 	dsb	sy
 8003ec2:	60bb      	str	r3, [r7, #8]
 8003ec4:	e7fe      	b.n	8003ec4 <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003ec6:	69bb      	ldr	r3, [r7, #24]
 8003ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eca:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	69fa      	ldr	r2, [r7, #28]
 8003ed0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	db04      	blt.n	8003ee4 <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003eda:	69fb      	ldr	r3, [r7, #28]
 8003edc:	f1c3 0205 	rsb	r2, r3, #5
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	6959      	ldr	r1, [r3, #20]
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	4613      	mov	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4413      	add	r3, r2
 8003ef0:	009b      	lsls	r3, r3, #2
 8003ef2:	4a1f      	ldr	r2, [pc, #124]	; (8003f70 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8003ef4:	4413      	add	r3, r2
 8003ef6:	4299      	cmp	r1, r3
 8003ef8:	d134      	bne.n	8003f64 <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003efa:	69bb      	ldr	r3, [r7, #24]
 8003efc:	3304      	adds	r3, #4
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fe faa0 	bl	8002444 <uxListRemove>
 8003f04:	4603      	mov	r3, r0
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d115      	bne.n	8003f36 <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f0e:	4918      	ldr	r1, [pc, #96]	; (8003f70 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8003f10:	4613      	mov	r3, r2
 8003f12:	009b      	lsls	r3, r3, #2
 8003f14:	4413      	add	r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d10a      	bne.n	8003f36 <vTaskPriorityDisinheritAfterTimeout+0xee>
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f24:	2201      	movs	r2, #1
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	43da      	mvns	r2, r3
 8003f2c:	4b11      	ldr	r3, [pc, #68]	; (8003f74 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4013      	ands	r3, r2
 8003f32:	4a10      	ldr	r2, [pc, #64]	; (8003f74 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8003f34:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	409a      	lsls	r2, r3
 8003f3e:	4b0d      	ldr	r3, [pc, #52]	; (8003f74 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	4a0b      	ldr	r2, [pc, #44]	; (8003f74 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8003f46:	6013      	str	r3, [r2, #0]
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4413      	add	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4a06      	ldr	r2, [pc, #24]	; (8003f70 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8003f56:	441a      	add	r2, r3
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	3304      	adds	r3, #4
 8003f5c:	4619      	mov	r1, r3
 8003f5e:	4610      	mov	r0, r2
 8003f60:	f7fe fa13 	bl	800238a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003f64:	bf00      	nop
 8003f66:	3720      	adds	r7, #32
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	2000002c 	.word	0x2000002c
 8003f70:	20000030 	.word	0x20000030
 8003f74:	2000010c 	.word	0x2000010c

08003f78 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8003f78:	b480      	push	{r7}
 8003f7a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003f7c:	4b07      	ldr	r3, [pc, #28]	; (8003f9c <pvTaskIncrementMutexHeldCount+0x24>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d004      	beq.n	8003f8e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003f84:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <pvTaskIncrementMutexHeldCount+0x24>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003f8a:	3201      	adds	r2, #1
 8003f8c:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 8003f8e:	4b03      	ldr	r3, [pc, #12]	; (8003f9c <pvTaskIncrementMutexHeldCount+0x24>)
 8003f90:	681b      	ldr	r3, [r3, #0]
	}
 8003f92:	4618      	mov	r0, r3
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	2000002c 	.word	0x2000002c

08003fa0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003faa:	4b29      	ldr	r3, [pc, #164]	; (8004050 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003fb0:	4b28      	ldr	r3, [pc, #160]	; (8004054 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fe fa44 	bl	8002444 <uxListRemove>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10b      	bne.n	8003fda <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003fc2:	4b24      	ldr	r3, [pc, #144]	; (8004054 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	2201      	movs	r2, #1
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	43da      	mvns	r2, r3
 8003fd0:	4b21      	ldr	r3, [pc, #132]	; (8004058 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	4a20      	ldr	r2, [pc, #128]	; (8004058 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003fd8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fe0:	d10a      	bne.n	8003ff8 <prvAddCurrentTaskToDelayedList+0x58>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d007      	beq.n	8003ff8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003fe8:	4b1a      	ldr	r3, [pc, #104]	; (8004054 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	3304      	adds	r3, #4
 8003fee:	4619      	mov	r1, r3
 8003ff0:	481a      	ldr	r0, [pc, #104]	; (800405c <prvAddCurrentTaskToDelayedList+0xbc>)
 8003ff2:	f7fe f9ca 	bl	800238a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003ff6:	e026      	b.n	8004046 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004000:	4b14      	ldr	r3, [pc, #80]	; (8004054 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004008:	68ba      	ldr	r2, [r7, #8]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	429a      	cmp	r2, r3
 800400e:	d209      	bcs.n	8004024 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004010:	4b13      	ldr	r3, [pc, #76]	; (8004060 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	4b0f      	ldr	r3, [pc, #60]	; (8004054 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	3304      	adds	r3, #4
 800401a:	4619      	mov	r1, r3
 800401c:	4610      	mov	r0, r2
 800401e:	f7fe f9d8 	bl	80023d2 <vListInsert>
}
 8004022:	e010      	b.n	8004046 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004024:	4b0f      	ldr	r3, [pc, #60]	; (8004064 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	4b0a      	ldr	r3, [pc, #40]	; (8004054 <prvAddCurrentTaskToDelayedList+0xb4>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	3304      	adds	r3, #4
 800402e:	4619      	mov	r1, r3
 8004030:	4610      	mov	r0, r2
 8004032:	f7fe f9ce 	bl	80023d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004036:	4b0c      	ldr	r3, [pc, #48]	; (8004068 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	429a      	cmp	r2, r3
 800403e:	d202      	bcs.n	8004046 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004040:	4a09      	ldr	r2, [pc, #36]	; (8004068 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	6013      	str	r3, [r2, #0]
}
 8004046:	bf00      	nop
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	20000108 	.word	0x20000108
 8004054:	2000002c 	.word	0x2000002c
 8004058:	2000010c 	.word	0x2000010c
 800405c:	200000f0 	.word	0x200000f0
 8004060:	200000c0 	.word	0x200000c0
 8004064:	200000bc 	.word	0x200000bc
 8004068:	20000124 	.word	0x20000124

0800406c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b084      	sub	sp, #16
 8004070:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 8004072:	2300      	movs	r3, #0
 8004074:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004076:	f000 fad1 	bl	800461c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800407a:	4b11      	ldr	r3, [pc, #68]	; (80040c0 <xTimerCreateTimerTask+0x54>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00b      	beq.n	800409a <xTimerCreateTimerTask+0x2e>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 8004082:	4b10      	ldr	r3, [pc, #64]	; (80040c4 <xTimerCreateTimerTask+0x58>)
 8004084:	9301      	str	r3, [sp, #4]
 8004086:	2302      	movs	r3, #2
 8004088:	9300      	str	r3, [sp, #0]
 800408a:	2300      	movs	r3, #0
 800408c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004090:	490d      	ldr	r1, [pc, #52]	; (80040c8 <xTimerCreateTimerTask+0x5c>)
 8004092:	480e      	ldr	r0, [pc, #56]	; (80040cc <xTimerCreateTimerTask+0x60>)
 8004094:	f7ff f846 	bl	8003124 <xTaskCreate>
 8004098:	6078      	str	r0, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d109      	bne.n	80040b4 <xTimerCreateTimerTask+0x48>
 80040a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	603b      	str	r3, [r7, #0]
 80040b2:	e7fe      	b.n	80040b2 <xTimerCreateTimerTask+0x46>
	return xReturn;
 80040b4:	687b      	ldr	r3, [r7, #4]
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	20000160 	.word	0x20000160
 80040c4:	20000164 	.word	0x20000164
 80040c8:	08004f54 	.word	0x08004f54
 80040cc:	08004201 	.word	0x08004201

080040d0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b08a      	sub	sp, #40	; 0x28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
 80040dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80040de:	2300      	movs	r3, #0
 80040e0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d109      	bne.n	80040fc <xTimerGenericCommand+0x2c>
 80040e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ec:	f383 8811 	msr	BASEPRI, r3
 80040f0:	f3bf 8f6f 	isb	sy
 80040f4:	f3bf 8f4f 	dsb	sy
 80040f8:	623b      	str	r3, [r7, #32]
 80040fa:	e7fe      	b.n	80040fa <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80040fc:	4b19      	ldr	r3, [pc, #100]	; (8004164 <xTimerGenericCommand+0x94>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d02a      	beq.n	800415a <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	2b05      	cmp	r3, #5
 8004114:	dc18      	bgt.n	8004148 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004116:	f7ff fd75 	bl	8003c04 <xTaskGetSchedulerState>
 800411a:	4603      	mov	r3, r0
 800411c:	2b02      	cmp	r3, #2
 800411e:	d109      	bne.n	8004134 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004120:	4b10      	ldr	r3, [pc, #64]	; (8004164 <xTimerGenericCommand+0x94>)
 8004122:	6818      	ldr	r0, [r3, #0]
 8004124:	f107 0114 	add.w	r1, r7, #20
 8004128:	2300      	movs	r3, #0
 800412a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800412c:	f7fe fa7a 	bl	8002624 <xQueueGenericSend>
 8004130:	6278      	str	r0, [r7, #36]	; 0x24
 8004132:	e012      	b.n	800415a <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004134:	4b0b      	ldr	r3, [pc, #44]	; (8004164 <xTimerGenericCommand+0x94>)
 8004136:	6818      	ldr	r0, [r3, #0]
 8004138:	f107 0114 	add.w	r1, r7, #20
 800413c:	2300      	movs	r3, #0
 800413e:	2200      	movs	r2, #0
 8004140:	f7fe fa70 	bl	8002624 <xQueueGenericSend>
 8004144:	6278      	str	r0, [r7, #36]	; 0x24
 8004146:	e008      	b.n	800415a <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004148:	4b06      	ldr	r3, [pc, #24]	; (8004164 <xTimerGenericCommand+0x94>)
 800414a:	6818      	ldr	r0, [r3, #0]
 800414c:	f107 0114 	add.w	r1, r7, #20
 8004150:	2300      	movs	r3, #0
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	f7fe fb60 	bl	8002818 <xQueueGenericSendFromISR>
 8004158:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800415c:	4618      	mov	r0, r3
 800415e:	3728      	adds	r7, #40	; 0x28
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	20000160 	.word	0x20000160

08004168 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b088      	sub	sp, #32
 800416c:	af02      	add	r7, sp, #8
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004172:	4b22      	ldr	r3, [pc, #136]	; (80041fc <prvProcessExpiredTimer+0x94>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	3304      	adds	r3, #4
 8004180:	4618      	mov	r0, r3
 8004182:	f7fe f95f 	bl	8002444 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800418c:	f003 0304 	and.w	r3, r3, #4
 8004190:	2b00      	cmp	r3, #0
 8004192:	d021      	beq.n	80041d8 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	699a      	ldr	r2, [r3, #24]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	18d1      	adds	r1, r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	683a      	ldr	r2, [r7, #0]
 80041a0:	6978      	ldr	r0, [r7, #20]
 80041a2:	f000 f8d1 	bl	8004348 <prvInsertTimerInActiveList>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d01e      	beq.n	80041ea <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80041ac:	2300      	movs	r3, #0
 80041ae:	9300      	str	r3, [sp, #0]
 80041b0:	2300      	movs	r3, #0
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	2100      	movs	r1, #0
 80041b6:	6978      	ldr	r0, [r7, #20]
 80041b8:	f7ff ff8a 	bl	80040d0 <xTimerGenericCommand>
 80041bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d112      	bne.n	80041ea <prvProcessExpiredTimer+0x82>
 80041c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c8:	f383 8811 	msr	BASEPRI, r3
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	e7fe      	b.n	80041d6 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80041de:	f023 0301 	bic.w	r3, r3, #1
 80041e2:	b2da      	uxtb	r2, r3
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	6978      	ldr	r0, [r7, #20]
 80041f0:	4798      	blx	r3
}
 80041f2:	bf00      	nop
 80041f4:	3718      	adds	r7, #24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20000158 	.word	0x20000158

08004200 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004208:	f107 0308 	add.w	r3, r7, #8
 800420c:	4618      	mov	r0, r3
 800420e:	f000 f857 	bl	80042c0 <prvGetNextExpireTime>
 8004212:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4619      	mov	r1, r3
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 f803 	bl	8004224 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800421e:	f000 f8d5 	bl	80043cc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004222:	e7f1      	b.n	8004208 <prvTimerTask+0x8>

08004224 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b084      	sub	sp, #16
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800422e:	f7ff f937 	bl	80034a0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004232:	f107 0308 	add.w	r3, r7, #8
 8004236:	4618      	mov	r0, r3
 8004238:	f000 f866 	bl	8004308 <prvSampleTimeNow>
 800423c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d130      	bne.n	80042a6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d10a      	bne.n	8004260 <prvProcessTimerOrBlockTask+0x3c>
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	429a      	cmp	r2, r3
 8004250:	d806      	bhi.n	8004260 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004252:	f7ff f933 	bl	80034bc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004256:	68f9      	ldr	r1, [r7, #12]
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f7ff ff85 	bl	8004168 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800425e:	e024      	b.n	80042aa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d008      	beq.n	8004278 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004266:	4b13      	ldr	r3, [pc, #76]	; (80042b4 <prvProcessTimerOrBlockTask+0x90>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d101      	bne.n	8004274 <prvProcessTimerOrBlockTask+0x50>
 8004270:	2301      	movs	r3, #1
 8004272:	e000      	b.n	8004276 <prvProcessTimerOrBlockTask+0x52>
 8004274:	2300      	movs	r3, #0
 8004276:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004278:	4b0f      	ldr	r3, [pc, #60]	; (80042b8 <prvProcessTimerOrBlockTask+0x94>)
 800427a:	6818      	ldr	r0, [r3, #0]
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	4619      	mov	r1, r3
 8004286:	f7fe ff19 	bl	80030bc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800428a:	f7ff f917 	bl	80034bc <xTaskResumeAll>
 800428e:	4603      	mov	r3, r0
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10a      	bne.n	80042aa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004294:	4b09      	ldr	r3, [pc, #36]	; (80042bc <prvProcessTimerOrBlockTask+0x98>)
 8004296:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800429a:	601a      	str	r2, [r3, #0]
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	f3bf 8f6f 	isb	sy
}
 80042a4:	e001      	b.n	80042aa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80042a6:	f7ff f909 	bl	80034bc <xTaskResumeAll>
}
 80042aa:	bf00      	nop
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	2000015c 	.word	0x2000015c
 80042b8:	20000160 	.word	0x20000160
 80042bc:	e000ed04 	.word	0xe000ed04

080042c0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80042c8:	4b0e      	ldr	r3, [pc, #56]	; (8004304 <prvGetNextExpireTime+0x44>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d101      	bne.n	80042d6 <prvGetNextExpireTime+0x16>
 80042d2:	2201      	movs	r2, #1
 80042d4:	e000      	b.n	80042d8 <prvGetNextExpireTime+0x18>
 80042d6:	2200      	movs	r2, #0
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d105      	bne.n	80042f0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042e4:	4b07      	ldr	r3, [pc, #28]	; (8004304 <prvGetNextExpireTime+0x44>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	60fb      	str	r3, [r7, #12]
 80042ee:	e001      	b.n	80042f4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80042f0:	2300      	movs	r3, #0
 80042f2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80042f4:	68fb      	ldr	r3, [r7, #12]
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	20000158 	.word	0x20000158

08004308 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b084      	sub	sp, #16
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004310:	f7ff f970 	bl	80035f4 <xTaskGetTickCount>
 8004314:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004316:	4b0b      	ldr	r3, [pc, #44]	; (8004344 <prvSampleTimeNow+0x3c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68fa      	ldr	r2, [r7, #12]
 800431c:	429a      	cmp	r2, r3
 800431e:	d205      	bcs.n	800432c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004320:	f000 f918 	bl	8004554 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	601a      	str	r2, [r3, #0]
 800432a:	e002      	b.n	8004332 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2200      	movs	r2, #0
 8004330:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004332:	4a04      	ldr	r2, [pc, #16]	; (8004344 <prvSampleTimeNow+0x3c>)
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004338:	68fb      	ldr	r3, [r7, #12]
}
 800433a:	4618      	mov	r0, r3
 800433c:	3710      	adds	r7, #16
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
 8004342:	bf00      	nop
 8004344:	20000168 	.word	0x20000168

08004348 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b086      	sub	sp, #24
 800434c:	af00      	add	r7, sp, #0
 800434e:	60f8      	str	r0, [r7, #12]
 8004350:	60b9      	str	r1, [r7, #8]
 8004352:	607a      	str	r2, [r7, #4]
 8004354:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004356:	2300      	movs	r3, #0
 8004358:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	68ba      	ldr	r2, [r7, #8]
 800435e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004366:	68ba      	ldr	r2, [r7, #8]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	429a      	cmp	r2, r3
 800436c:	d812      	bhi.n	8004394 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	1ad2      	subs	r2, r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	699b      	ldr	r3, [r3, #24]
 8004378:	429a      	cmp	r2, r3
 800437a:	d302      	bcc.n	8004382 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800437c:	2301      	movs	r3, #1
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	e01b      	b.n	80043ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004382:	4b10      	ldr	r3, [pc, #64]	; (80043c4 <prvInsertTimerInActiveList+0x7c>)
 8004384:	681a      	ldr	r2, [r3, #0]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	3304      	adds	r3, #4
 800438a:	4619      	mov	r1, r3
 800438c:	4610      	mov	r0, r2
 800438e:	f7fe f820 	bl	80023d2 <vListInsert>
 8004392:	e012      	b.n	80043ba <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	429a      	cmp	r2, r3
 800439a:	d206      	bcs.n	80043aa <prvInsertTimerInActiveList+0x62>
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d302      	bcc.n	80043aa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80043a4:	2301      	movs	r3, #1
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	e007      	b.n	80043ba <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043aa:	4b07      	ldr	r3, [pc, #28]	; (80043c8 <prvInsertTimerInActiveList+0x80>)
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	3304      	adds	r3, #4
 80043b2:	4619      	mov	r1, r3
 80043b4:	4610      	mov	r0, r2
 80043b6:	f7fe f80c 	bl	80023d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80043ba:	697b      	ldr	r3, [r7, #20]
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3718      	adds	r7, #24
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	2000015c 	.word	0x2000015c
 80043c8:	20000158 	.word	0x20000158

080043cc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b08c      	sub	sp, #48	; 0x30
 80043d0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80043d2:	e0ac      	b.n	800452e <prvProcessReceivedCommands+0x162>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	f2c0 80a8 	blt.w	800452c <prvProcessReceivedCommands+0x160>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	627b      	str	r3, [r7, #36]	; 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	695b      	ldr	r3, [r3, #20]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d004      	beq.n	80043f2 <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	3304      	adds	r3, #4
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7fe f829 	bl	8002444 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80043f2:	1d3b      	adds	r3, r7, #4
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7ff ff87 	bl	8004308 <prvSampleTimeNow>
 80043fa:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	2b09      	cmp	r3, #9
 8004400:	f200 8095 	bhi.w	800452e <prvProcessReceivedCommands+0x162>
 8004404:	a201      	add	r2, pc, #4	; (adr r2, 800440c <prvProcessReceivedCommands+0x40>)
 8004406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440a:	bf00      	nop
 800440c:	08004435 	.word	0x08004435
 8004410:	08004435 	.word	0x08004435
 8004414:	08004435 	.word	0x08004435
 8004418:	080044a7 	.word	0x080044a7
 800441c:	080044bb 	.word	0x080044bb
 8004420:	08004503 	.word	0x08004503
 8004424:	08004435 	.word	0x08004435
 8004428:	08004435 	.word	0x08004435
 800442c:	080044a7 	.word	0x080044a7
 8004430:	080044bb 	.word	0x080044bb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004436:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800443a:	f043 0301 	orr.w	r3, r3, #1
 800443e:	b2da      	uxtb	r2, r3
 8004440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004442:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004446:	68fa      	ldr	r2, [r7, #12]
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	18d1      	adds	r1, r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6a3a      	ldr	r2, [r7, #32]
 8004452:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004454:	f7ff ff78 	bl	8004348 <prvInsertTimerInActiveList>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d067      	beq.n	800452e <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004464:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004468:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800446c:	f003 0304 	and.w	r3, r3, #4
 8004470:	2b00      	cmp	r3, #0
 8004472:	d05c      	beq.n	800452e <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	441a      	add	r2, r3
 800447c:	2300      	movs	r3, #0
 800447e:	9300      	str	r3, [sp, #0]
 8004480:	2300      	movs	r3, #0
 8004482:	2100      	movs	r1, #0
 8004484:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004486:	f7ff fe23 	bl	80040d0 <xTimerGenericCommand>
 800448a:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 800448c:	69fb      	ldr	r3, [r7, #28]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d14d      	bne.n	800452e <prvProcessReceivedCommands+0x162>
 8004492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	61bb      	str	r3, [r7, #24]
 80044a4:	e7fe      	b.n	80044a4 <prvProcessReceivedCommands+0xd8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80044a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044ac:	f023 0301 	bic.w	r3, r3, #1
 80044b0:	b2da      	uxtb	r2, r3
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80044b8:	e039      	b.n	800452e <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80044c0:	f043 0301 	orr.w	r3, r3, #1
 80044c4:	b2da      	uxtb	r2, r3
 80044c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80044d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d109      	bne.n	80044ee <prvProcessReceivedCommands+0x122>
 80044da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	e7fe      	b.n	80044ec <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80044ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f0:	699a      	ldr	r2, [r3, #24]
 80044f2:	6a3b      	ldr	r3, [r7, #32]
 80044f4:	18d1      	adds	r1, r2, r3
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	6a3a      	ldr	r2, [r7, #32]
 80044fa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80044fc:	f7ff ff24 	bl	8004348 <prvInsertTimerInActiveList>
					break;
 8004500:	e015      	b.n	800452e <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004504:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004508:	f003 0302 	and.w	r3, r3, #2
 800450c:	2b00      	cmp	r3, #0
 800450e:	d103      	bne.n	8004518 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8004510:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004512:	f000 fbbf 	bl	8004c94 <vPortFree>
 8004516:	e00a      	b.n	800452e <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800451e:	f023 0301 	bic.w	r3, r3, #1
 8004522:	b2da      	uxtb	r2, r3
 8004524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004526:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800452a:	e000      	b.n	800452e <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800452c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800452e:	4b08      	ldr	r3, [pc, #32]	; (8004550 <prvProcessReceivedCommands+0x184>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f107 0108 	add.w	r1, r7, #8
 8004536:	2200      	movs	r2, #0
 8004538:	4618      	mov	r0, r3
 800453a:	f7fe fa8b 	bl	8002a54 <xQueueReceive>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	f47f af47 	bne.w	80043d4 <prvProcessReceivedCommands+0x8>
	}
}
 8004546:	bf00      	nop
 8004548:	3728      	adds	r7, #40	; 0x28
 800454a:	46bd      	mov	sp, r7
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	20000160 	.word	0x20000160

08004554 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b088      	sub	sp, #32
 8004558:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800455a:	e047      	b.n	80045ec <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800455c:	4b2d      	ldr	r3, [pc, #180]	; (8004614 <prvSwitchTimerLists+0xc0>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004566:	4b2b      	ldr	r3, [pc, #172]	; (8004614 <prvSwitchTimerLists+0xc0>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	3304      	adds	r3, #4
 8004574:	4618      	mov	r0, r3
 8004576:	f7fd ff65 	bl	8002444 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004588:	f003 0304 	and.w	r3, r3, #4
 800458c:	2b00      	cmp	r3, #0
 800458e:	d02d      	beq.n	80045ec <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	699b      	ldr	r3, [r3, #24]
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	4413      	add	r3, r2
 8004598:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800459a:	68ba      	ldr	r2, [r7, #8]
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d90e      	bls.n	80045c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	68ba      	ldr	r2, [r7, #8]
 80045a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80045ae:	4b19      	ldr	r3, [pc, #100]	; (8004614 <prvSwitchTimerLists+0xc0>)
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	3304      	adds	r3, #4
 80045b6:	4619      	mov	r1, r3
 80045b8:	4610      	mov	r0, r2
 80045ba:	f7fd ff0a 	bl	80023d2 <vListInsert>
 80045be:	e015      	b.n	80045ec <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80045c0:	2300      	movs	r3, #0
 80045c2:	9300      	str	r3, [sp, #0]
 80045c4:	2300      	movs	r3, #0
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	2100      	movs	r1, #0
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	f7ff fd80 	bl	80040d0 <xTimerGenericCommand>
 80045d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d109      	bne.n	80045ec <prvSwitchTimerLists+0x98>
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	603b      	str	r3, [r7, #0]
 80045ea:	e7fe      	b.n	80045ea <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045ec:	4b09      	ldr	r3, [pc, #36]	; (8004614 <prvSwitchTimerLists+0xc0>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1b2      	bne.n	800455c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80045f6:	4b07      	ldr	r3, [pc, #28]	; (8004614 <prvSwitchTimerLists+0xc0>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80045fc:	4b06      	ldr	r3, [pc, #24]	; (8004618 <prvSwitchTimerLists+0xc4>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a04      	ldr	r2, [pc, #16]	; (8004614 <prvSwitchTimerLists+0xc0>)
 8004602:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004604:	4a04      	ldr	r2, [pc, #16]	; (8004618 <prvSwitchTimerLists+0xc4>)
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	6013      	str	r3, [r2, #0]
}
 800460a:	bf00      	nop
 800460c:	3718      	adds	r7, #24
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	20000158 	.word	0x20000158
 8004618:	2000015c 	.word	0x2000015c

0800461c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800461c:	b580      	push	{r7, lr}
 800461e:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004620:	f000 f95c 	bl	80048dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004624:	4b12      	ldr	r3, [pc, #72]	; (8004670 <prvCheckForValidListAndQueue+0x54>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d11d      	bne.n	8004668 <prvCheckForValidListAndQueue+0x4c>
		{
			vListInitialise( &xActiveTimerList1 );
 800462c:	4811      	ldr	r0, [pc, #68]	; (8004674 <prvCheckForValidListAndQueue+0x58>)
 800462e:	f7fd fe7f 	bl	8002330 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004632:	4811      	ldr	r0, [pc, #68]	; (8004678 <prvCheckForValidListAndQueue+0x5c>)
 8004634:	f7fd fe7c 	bl	8002330 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004638:	4b10      	ldr	r3, [pc, #64]	; (800467c <prvCheckForValidListAndQueue+0x60>)
 800463a:	4a0e      	ldr	r2, [pc, #56]	; (8004674 <prvCheckForValidListAndQueue+0x58>)
 800463c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800463e:	4b10      	ldr	r3, [pc, #64]	; (8004680 <prvCheckForValidListAndQueue+0x64>)
 8004640:	4a0d      	ldr	r2, [pc, #52]	; (8004678 <prvCheckForValidListAndQueue+0x5c>)
 8004642:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004644:	2200      	movs	r2, #0
 8004646:	210c      	movs	r1, #12
 8004648:	200a      	movs	r0, #10
 800464a:	f7fd ff8d 	bl	8002568 <xQueueGenericCreate>
 800464e:	4602      	mov	r2, r0
 8004650:	4b07      	ldr	r3, [pc, #28]	; (8004670 <prvCheckForValidListAndQueue+0x54>)
 8004652:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004654:	4b06      	ldr	r3, [pc, #24]	; (8004670 <prvCheckForValidListAndQueue+0x54>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d005      	beq.n	8004668 <prvCheckForValidListAndQueue+0x4c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800465c:	4b04      	ldr	r3, [pc, #16]	; (8004670 <prvCheckForValidListAndQueue+0x54>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4908      	ldr	r1, [pc, #32]	; (8004684 <prvCheckForValidListAndQueue+0x68>)
 8004662:	4618      	mov	r0, r3
 8004664:	f7fe fd02 	bl	800306c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004668:	f000 f966 	bl	8004938 <vPortExitCritical>
}
 800466c:	bf00      	nop
 800466e:	bd80      	pop	{r7, pc}
 8004670:	20000160 	.word	0x20000160
 8004674:	20000130 	.word	0x20000130
 8004678:	20000144 	.word	0x20000144
 800467c:	20000158 	.word	0x20000158
 8004680:	2000015c 	.word	0x2000015c
 8004684:	08004f5c 	.word	0x08004f5c

08004688 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	3b04      	subs	r3, #4
 8004698:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	3b04      	subs	r3, #4
 80046a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	f023 0201 	bic.w	r2, r3, #1
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	3b04      	subs	r3, #4
 80046b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80046b8:	4a0c      	ldr	r2, [pc, #48]	; (80046ec <pxPortInitialiseStack+0x64>)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	3b14      	subs	r3, #20
 80046c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	3b04      	subs	r3, #4
 80046ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f06f 0202 	mvn.w	r2, #2
 80046d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	3b20      	subs	r3, #32
 80046dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80046de:	68fb      	ldr	r3, [r7, #12]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr
 80046ec:	080046f1 	.word	0x080046f1

080046f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80046f6:	2300      	movs	r3, #0
 80046f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80046fa:	4b11      	ldr	r3, [pc, #68]	; (8004740 <prvTaskExitError+0x50>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004702:	d009      	beq.n	8004718 <prvTaskExitError+0x28>
 8004704:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004708:	f383 8811 	msr	BASEPRI, r3
 800470c:	f3bf 8f6f 	isb	sy
 8004710:	f3bf 8f4f 	dsb	sy
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	e7fe      	b.n	8004716 <prvTaskExitError+0x26>
 8004718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800471c:	f383 8811 	msr	BASEPRI, r3
 8004720:	f3bf 8f6f 	isb	sy
 8004724:	f3bf 8f4f 	dsb	sy
 8004728:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800472a:	bf00      	nop
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d0fc      	beq.n	800472c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004732:	bf00      	nop
 8004734:	3714      	adds	r7, #20
 8004736:	46bd      	mov	sp, r7
 8004738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473c:	4770      	bx	lr
 800473e:	bf00      	nop
 8004740:	2000000c 	.word	0x2000000c
	...

08004750 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004750:	4b07      	ldr	r3, [pc, #28]	; (8004770 <pxCurrentTCBConst2>)
 8004752:	6819      	ldr	r1, [r3, #0]
 8004754:	6808      	ldr	r0, [r1, #0]
 8004756:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800475a:	f380 8809 	msr	PSP, r0
 800475e:	f3bf 8f6f 	isb	sy
 8004762:	f04f 0000 	mov.w	r0, #0
 8004766:	f380 8811 	msr	BASEPRI, r0
 800476a:	4770      	bx	lr
 800476c:	f3af 8000 	nop.w

08004770 <pxCurrentTCBConst2>:
 8004770:	2000002c 	.word	0x2000002c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004774:	bf00      	nop
 8004776:	bf00      	nop

08004778 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004778:	4808      	ldr	r0, [pc, #32]	; (800479c <prvPortStartFirstTask+0x24>)
 800477a:	6800      	ldr	r0, [r0, #0]
 800477c:	6800      	ldr	r0, [r0, #0]
 800477e:	f380 8808 	msr	MSP, r0
 8004782:	f04f 0000 	mov.w	r0, #0
 8004786:	f380 8814 	msr	CONTROL, r0
 800478a:	b662      	cpsie	i
 800478c:	b661      	cpsie	f
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	df00      	svc	0
 8004798:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800479a:	bf00      	nop
 800479c:	e000ed08 	.word	0xe000ed08

080047a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80047a6:	4b44      	ldr	r3, [pc, #272]	; (80048b8 <xPortStartScheduler+0x118>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a44      	ldr	r2, [pc, #272]	; (80048bc <xPortStartScheduler+0x11c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d109      	bne.n	80047c4 <xPortStartScheduler+0x24>
 80047b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b4:	f383 8811 	msr	BASEPRI, r3
 80047b8:	f3bf 8f6f 	isb	sy
 80047bc:	f3bf 8f4f 	dsb	sy
 80047c0:	613b      	str	r3, [r7, #16]
 80047c2:	e7fe      	b.n	80047c2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80047c4:	4b3c      	ldr	r3, [pc, #240]	; (80048b8 <xPortStartScheduler+0x118>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a3d      	ldr	r2, [pc, #244]	; (80048c0 <xPortStartScheduler+0x120>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d109      	bne.n	80047e2 <xPortStartScheduler+0x42>
 80047ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047d2:	f383 8811 	msr	BASEPRI, r3
 80047d6:	f3bf 8f6f 	isb	sy
 80047da:	f3bf 8f4f 	dsb	sy
 80047de:	60fb      	str	r3, [r7, #12]
 80047e0:	e7fe      	b.n	80047e0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80047e2:	4b38      	ldr	r3, [pc, #224]	; (80048c4 <xPortStartScheduler+0x124>)
 80047e4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	22ff      	movs	r2, #255	; 0xff
 80047f2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047fc:	78fb      	ldrb	r3, [r7, #3]
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004804:	b2da      	uxtb	r2, r3
 8004806:	4b30      	ldr	r3, [pc, #192]	; (80048c8 <xPortStartScheduler+0x128>)
 8004808:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800480a:	4b30      	ldr	r3, [pc, #192]	; (80048cc <xPortStartScheduler+0x12c>)
 800480c:	2207      	movs	r2, #7
 800480e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004810:	e009      	b.n	8004826 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8004812:	4b2e      	ldr	r3, [pc, #184]	; (80048cc <xPortStartScheduler+0x12c>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	3b01      	subs	r3, #1
 8004818:	4a2c      	ldr	r2, [pc, #176]	; (80048cc <xPortStartScheduler+0x12c>)
 800481a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800481c:	78fb      	ldrb	r3, [r7, #3]
 800481e:	b2db      	uxtb	r3, r3
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	b2db      	uxtb	r3, r3
 8004824:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004826:	78fb      	ldrb	r3, [r7, #3]
 8004828:	b2db      	uxtb	r3, r3
 800482a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482e:	2b80      	cmp	r3, #128	; 0x80
 8004830:	d0ef      	beq.n	8004812 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004832:	4b26      	ldr	r3, [pc, #152]	; (80048cc <xPortStartScheduler+0x12c>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f1c3 0307 	rsb	r3, r3, #7
 800483a:	2b04      	cmp	r3, #4
 800483c:	d009      	beq.n	8004852 <xPortStartScheduler+0xb2>
 800483e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004842:	f383 8811 	msr	BASEPRI, r3
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	60bb      	str	r3, [r7, #8]
 8004850:	e7fe      	b.n	8004850 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004852:	4b1e      	ldr	r3, [pc, #120]	; (80048cc <xPortStartScheduler+0x12c>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	021b      	lsls	r3, r3, #8
 8004858:	4a1c      	ldr	r2, [pc, #112]	; (80048cc <xPortStartScheduler+0x12c>)
 800485a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800485c:	4b1b      	ldr	r3, [pc, #108]	; (80048cc <xPortStartScheduler+0x12c>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004864:	4a19      	ldr	r2, [pc, #100]	; (80048cc <xPortStartScheduler+0x12c>)
 8004866:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	b2da      	uxtb	r2, r3
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004870:	4b17      	ldr	r3, [pc, #92]	; (80048d0 <xPortStartScheduler+0x130>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a16      	ldr	r2, [pc, #88]	; (80048d0 <xPortStartScheduler+0x130>)
 8004876:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800487a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800487c:	4b14      	ldr	r3, [pc, #80]	; (80048d0 <xPortStartScheduler+0x130>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a13      	ldr	r2, [pc, #76]	; (80048d0 <xPortStartScheduler+0x130>)
 8004882:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004886:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004888:	f000 f8d6 	bl	8004a38 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800488c:	4b11      	ldr	r3, [pc, #68]	; (80048d4 <xPortStartScheduler+0x134>)
 800488e:	2200      	movs	r2, #0
 8004890:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004892:	f000 f8f5 	bl	8004a80 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004896:	4b10      	ldr	r3, [pc, #64]	; (80048d8 <xPortStartScheduler+0x138>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a0f      	ldr	r2, [pc, #60]	; (80048d8 <xPortStartScheduler+0x138>)
 800489c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80048a0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80048a2:	f7ff ff69 	bl	8004778 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80048a6:	f7fe ff6d 	bl	8003784 <vTaskSwitchContext>
	prvTaskExitError();
 80048aa:	f7ff ff21 	bl	80046f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80048ae:	2300      	movs	r3, #0
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	e000ed00 	.word	0xe000ed00
 80048bc:	410fc271 	.word	0x410fc271
 80048c0:	410fc270 	.word	0x410fc270
 80048c4:	e000e400 	.word	0xe000e400
 80048c8:	2000016c 	.word	0x2000016c
 80048cc:	20000170 	.word	0x20000170
 80048d0:	e000ed20 	.word	0xe000ed20
 80048d4:	2000000c 	.word	0x2000000c
 80048d8:	e000ef34 	.word	0xe000ef34

080048dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e6:	f383 8811 	msr	BASEPRI, r3
 80048ea:	f3bf 8f6f 	isb	sy
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80048f4:	4b0e      	ldr	r3, [pc, #56]	; (8004930 <vPortEnterCritical+0x54>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3301      	adds	r3, #1
 80048fa:	4a0d      	ldr	r2, [pc, #52]	; (8004930 <vPortEnterCritical+0x54>)
 80048fc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80048fe:	4b0c      	ldr	r3, [pc, #48]	; (8004930 <vPortEnterCritical+0x54>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b01      	cmp	r3, #1
 8004904:	d10e      	bne.n	8004924 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004906:	4b0b      	ldr	r3, [pc, #44]	; (8004934 <vPortEnterCritical+0x58>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b00      	cmp	r3, #0
 800490e:	d009      	beq.n	8004924 <vPortEnterCritical+0x48>
 8004910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004914:	f383 8811 	msr	BASEPRI, r3
 8004918:	f3bf 8f6f 	isb	sy
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	603b      	str	r3, [r7, #0]
 8004922:	e7fe      	b.n	8004922 <vPortEnterCritical+0x46>
	}
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr
 8004930:	2000000c 	.word	0x2000000c
 8004934:	e000ed04 	.word	0xe000ed04

08004938 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800493e:	4b11      	ldr	r3, [pc, #68]	; (8004984 <vPortExitCritical+0x4c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d109      	bne.n	800495a <vPortExitCritical+0x22>
 8004946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494a:	f383 8811 	msr	BASEPRI, r3
 800494e:	f3bf 8f6f 	isb	sy
 8004952:	f3bf 8f4f 	dsb	sy
 8004956:	607b      	str	r3, [r7, #4]
 8004958:	e7fe      	b.n	8004958 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800495a:	4b0a      	ldr	r3, [pc, #40]	; (8004984 <vPortExitCritical+0x4c>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	3b01      	subs	r3, #1
 8004960:	4a08      	ldr	r2, [pc, #32]	; (8004984 <vPortExitCritical+0x4c>)
 8004962:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004964:	4b07      	ldr	r3, [pc, #28]	; (8004984 <vPortExitCritical+0x4c>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d104      	bne.n	8004976 <vPortExitCritical+0x3e>
 800496c:	2300      	movs	r3, #0
 800496e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004976:	bf00      	nop
 8004978:	370c      	adds	r7, #12
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	2000000c 	.word	0x2000000c
	...

08004990 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004990:	f3ef 8009 	mrs	r0, PSP
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	4b15      	ldr	r3, [pc, #84]	; (80049f0 <pxCurrentTCBConst>)
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	f01e 0f10 	tst.w	lr, #16
 80049a0:	bf08      	it	eq
 80049a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80049a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049aa:	6010      	str	r0, [r2, #0]
 80049ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80049b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80049b4:	f380 8811 	msr	BASEPRI, r0
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	f3bf 8f6f 	isb	sy
 80049c0:	f7fe fee0 	bl	8003784 <vTaskSwitchContext>
 80049c4:	f04f 0000 	mov.w	r0, #0
 80049c8:	f380 8811 	msr	BASEPRI, r0
 80049cc:	bc09      	pop	{r0, r3}
 80049ce:	6819      	ldr	r1, [r3, #0]
 80049d0:	6808      	ldr	r0, [r1, #0]
 80049d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049d6:	f01e 0f10 	tst.w	lr, #16
 80049da:	bf08      	it	eq
 80049dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80049e0:	f380 8809 	msr	PSP, r0
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	f3af 8000 	nop.w

080049f0 <pxCurrentTCBConst>:
 80049f0:	2000002c 	.word	0x2000002c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80049f4:	bf00      	nop
 80049f6:	bf00      	nop

080049f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b082      	sub	sp, #8
 80049fc:	af00      	add	r7, sp, #0
	__asm volatile
 80049fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a02:	f383 8811 	msr	BASEPRI, r3
 8004a06:	f3bf 8f6f 	isb	sy
 8004a0a:	f3bf 8f4f 	dsb	sy
 8004a0e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004a10:	f7fe fe00 	bl	8003614 <xTaskIncrementTick>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a1a:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <SysTick_Handler+0x3c>)
 8004a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	2300      	movs	r3, #0
 8004a24:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004a2c:	bf00      	nop
 8004a2e:	3708      	adds	r7, #8
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	e000ed04 	.word	0xe000ed04

08004a38 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004a38:	b480      	push	{r7}
 8004a3a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a3c:	4b0b      	ldr	r3, [pc, #44]	; (8004a6c <vPortSetupTimerInterrupt+0x34>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a42:	4b0b      	ldr	r3, [pc, #44]	; (8004a70 <vPortSetupTimerInterrupt+0x38>)
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a48:	4b0a      	ldr	r3, [pc, #40]	; (8004a74 <vPortSetupTimerInterrupt+0x3c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a0a      	ldr	r2, [pc, #40]	; (8004a78 <vPortSetupTimerInterrupt+0x40>)
 8004a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a52:	099b      	lsrs	r3, r3, #6
 8004a54:	4a09      	ldr	r2, [pc, #36]	; (8004a7c <vPortSetupTimerInterrupt+0x44>)
 8004a56:	3b01      	subs	r3, #1
 8004a58:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a5a:	4b04      	ldr	r3, [pc, #16]	; (8004a6c <vPortSetupTimerInterrupt+0x34>)
 8004a5c:	2207      	movs	r2, #7
 8004a5e:	601a      	str	r2, [r3, #0]
}
 8004a60:	bf00      	nop
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	e000e010 	.word	0xe000e010
 8004a70:	e000e018 	.word	0xe000e018
 8004a74:	20000000 	.word	0x20000000
 8004a78:	10624dd3 	.word	0x10624dd3
 8004a7c:	e000e014 	.word	0xe000e014

08004a80 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004a80:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004a90 <vPortEnableVFP+0x10>
 8004a84:	6801      	ldr	r1, [r0, #0]
 8004a86:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004a8a:	6001      	str	r1, [r0, #0]
 8004a8c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004a8e:	bf00      	nop
 8004a90:	e000ed88 	.word	0xe000ed88

08004a94 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004a94:	b480      	push	{r7}
 8004a96:	b085      	sub	sp, #20
 8004a98:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004a9a:	f3ef 8305 	mrs	r3, IPSR
 8004a9e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2b0f      	cmp	r3, #15
 8004aa4:	d913      	bls.n	8004ace <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004aa6:	4a16      	ldr	r2, [pc, #88]	; (8004b00 <vPortValidateInterruptPriority+0x6c>)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	4413      	add	r3, r2
 8004aac:	781b      	ldrb	r3, [r3, #0]
 8004aae:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004ab0:	4b14      	ldr	r3, [pc, #80]	; (8004b04 <vPortValidateInterruptPriority+0x70>)
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	7afa      	ldrb	r2, [r7, #11]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d209      	bcs.n	8004ace <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004abe:	f383 8811 	msr	BASEPRI, r3
 8004ac2:	f3bf 8f6f 	isb	sy
 8004ac6:	f3bf 8f4f 	dsb	sy
 8004aca:	607b      	str	r3, [r7, #4]
 8004acc:	e7fe      	b.n	8004acc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004ace:	4b0e      	ldr	r3, [pc, #56]	; (8004b08 <vPortValidateInterruptPriority+0x74>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004ad6:	4b0d      	ldr	r3, [pc, #52]	; (8004b0c <vPortValidateInterruptPriority+0x78>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d909      	bls.n	8004af2 <vPortValidateInterruptPriority+0x5e>
 8004ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae2:	f383 8811 	msr	BASEPRI, r3
 8004ae6:	f3bf 8f6f 	isb	sy
 8004aea:	f3bf 8f4f 	dsb	sy
 8004aee:	603b      	str	r3, [r7, #0]
 8004af0:	e7fe      	b.n	8004af0 <vPortValidateInterruptPriority+0x5c>
	}
 8004af2:	bf00      	nop
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	e000e3f0 	.word	0xe000e3f0
 8004b04:	2000016c 	.word	0x2000016c
 8004b08:	e000ed0c 	.word	0xe000ed0c
 8004b0c:	20000170 	.word	0x20000170

08004b10 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b08a      	sub	sp, #40	; 0x28
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004b1c:	f7fe fcc0 	bl	80034a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004b20:	4b57      	ldr	r3, [pc, #348]	; (8004c80 <pvPortMalloc+0x170>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d101      	bne.n	8004b2c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004b28:	f000 f90c 	bl	8004d44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b2c:	4b55      	ldr	r3, [pc, #340]	; (8004c84 <pvPortMalloc+0x174>)
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	4013      	ands	r3, r2
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f040 808c 	bne.w	8004c52 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d01c      	beq.n	8004b7a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004b40:	2208      	movs	r2, #8
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4413      	add	r3, r2
 8004b46:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d013      	beq.n	8004b7a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f023 0307 	bic.w	r3, r3, #7
 8004b58:	3308      	adds	r3, #8
 8004b5a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f003 0307 	and.w	r3, r3, #7
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d009      	beq.n	8004b7a <pvPortMalloc+0x6a>
 8004b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6a:	f383 8811 	msr	BASEPRI, r3
 8004b6e:	f3bf 8f6f 	isb	sy
 8004b72:	f3bf 8f4f 	dsb	sy
 8004b76:	617b      	str	r3, [r7, #20]
 8004b78:	e7fe      	b.n	8004b78 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d068      	beq.n	8004c52 <pvPortMalloc+0x142>
 8004b80:	4b41      	ldr	r3, [pc, #260]	; (8004c88 <pvPortMalloc+0x178>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d863      	bhi.n	8004c52 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b8a:	4b40      	ldr	r3, [pc, #256]	; (8004c8c <pvPortMalloc+0x17c>)
 8004b8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b8e:	4b3f      	ldr	r3, [pc, #252]	; (8004c8c <pvPortMalloc+0x17c>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b94:	e004      	b.n	8004ba0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d903      	bls.n	8004bb2 <pvPortMalloc+0xa2>
 8004baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f1      	bne.n	8004b96 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004bb2:	4b33      	ldr	r3, [pc, #204]	; (8004c80 <pvPortMalloc+0x170>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	d04a      	beq.n	8004c52 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004bbc:	6a3b      	ldr	r3, [r7, #32]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	2208      	movs	r2, #8
 8004bc2:	4413      	add	r3, r2
 8004bc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	6a3b      	ldr	r3, [r7, #32]
 8004bcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	1ad2      	subs	r2, r2, r3
 8004bd6:	2308      	movs	r3, #8
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d91e      	bls.n	8004c1c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	4413      	add	r3, r2
 8004be4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004be6:	69bb      	ldr	r3, [r7, #24]
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d009      	beq.n	8004c04 <pvPortMalloc+0xf4>
 8004bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf4:	f383 8811 	msr	BASEPRI, r3
 8004bf8:	f3bf 8f6f 	isb	sy
 8004bfc:	f3bf 8f4f 	dsb	sy
 8004c00:	613b      	str	r3, [r7, #16]
 8004c02:	e7fe      	b.n	8004c02 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	685a      	ldr	r2, [r3, #4]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	1ad2      	subs	r2, r2, r3
 8004c0c:	69bb      	ldr	r3, [r7, #24]
 8004c0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004c16:	69b8      	ldr	r0, [r7, #24]
 8004c18:	f000 f8f6 	bl	8004e08 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004c1c:	4b1a      	ldr	r3, [pc, #104]	; (8004c88 <pvPortMalloc+0x178>)
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	4a18      	ldr	r2, [pc, #96]	; (8004c88 <pvPortMalloc+0x178>)
 8004c28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004c2a:	4b17      	ldr	r3, [pc, #92]	; (8004c88 <pvPortMalloc+0x178>)
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	4b18      	ldr	r3, [pc, #96]	; (8004c90 <pvPortMalloc+0x180>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d203      	bcs.n	8004c3e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004c36:	4b14      	ldr	r3, [pc, #80]	; (8004c88 <pvPortMalloc+0x178>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a15      	ldr	r2, [pc, #84]	; (8004c90 <pvPortMalloc+0x180>)
 8004c3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c40:	685a      	ldr	r2, [r3, #4]
 8004c42:	4b10      	ldr	r3, [pc, #64]	; (8004c84 <pvPortMalloc+0x174>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	431a      	orrs	r2, r3
 8004c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	2200      	movs	r2, #0
 8004c50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004c52:	f7fe fc33 	bl	80034bc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d009      	beq.n	8004c74 <pvPortMalloc+0x164>
 8004c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	60fb      	str	r3, [r7, #12]
 8004c72:	e7fe      	b.n	8004c72 <pvPortMalloc+0x162>
	return pvReturn;
 8004c74:	69fb      	ldr	r3, [r7, #28]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3728      	adds	r7, #40	; 0x28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	20012d7c 	.word	0x20012d7c
 8004c84:	20012d88 	.word	0x20012d88
 8004c88:	20012d80 	.word	0x20012d80
 8004c8c:	20012d74 	.word	0x20012d74
 8004c90:	20012d84 	.word	0x20012d84

08004c94 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d046      	beq.n	8004d34 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ca6:	2308      	movs	r3, #8
 8004ca8:	425b      	negs	r3, r3
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	4413      	add	r3, r2
 8004cae:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	685a      	ldr	r2, [r3, #4]
 8004cb8:	4b20      	ldr	r3, [pc, #128]	; (8004d3c <vPortFree+0xa8>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4013      	ands	r3, r2
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d109      	bne.n	8004cd6 <vPortFree+0x42>
 8004cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	e7fe      	b.n	8004cd4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d009      	beq.n	8004cf2 <vPortFree+0x5e>
 8004cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	60bb      	str	r3, [r7, #8]
 8004cf0:	e7fe      	b.n	8004cf0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004cf2:	693b      	ldr	r3, [r7, #16]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	4b11      	ldr	r3, [pc, #68]	; (8004d3c <vPortFree+0xa8>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d019      	beq.n	8004d34 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d115      	bne.n	8004d34 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	685a      	ldr	r2, [r3, #4]
 8004d0c:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <vPortFree+0xa8>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	43db      	mvns	r3, r3
 8004d12:	401a      	ands	r2, r3
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004d18:	f7fe fbc2 	bl	80034a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	4b07      	ldr	r3, [pc, #28]	; (8004d40 <vPortFree+0xac>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4413      	add	r3, r2
 8004d26:	4a06      	ldr	r2, [pc, #24]	; (8004d40 <vPortFree+0xac>)
 8004d28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004d2a:	6938      	ldr	r0, [r7, #16]
 8004d2c:	f000 f86c 	bl	8004e08 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004d30:	f7fe fbc4 	bl	80034bc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004d34:	bf00      	nop
 8004d36:	3718      	adds	r7, #24
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}
 8004d3c:	20012d88 	.word	0x20012d88
 8004d40:	20012d80 	.word	0x20012d80

08004d44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004d4a:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8004d4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004d50:	4b27      	ldr	r3, [pc, #156]	; (8004df0 <prvHeapInit+0xac>)
 8004d52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f003 0307 	and.w	r3, r3, #7
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00c      	beq.n	8004d78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	3307      	adds	r3, #7
 8004d62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f023 0307 	bic.w	r3, r3, #7
 8004d6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d6c:	68ba      	ldr	r2, [r7, #8]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	4a1f      	ldr	r2, [pc, #124]	; (8004df0 <prvHeapInit+0xac>)
 8004d74:	4413      	add	r3, r2
 8004d76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d7c:	4a1d      	ldr	r2, [pc, #116]	; (8004df4 <prvHeapInit+0xb0>)
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d82:	4b1c      	ldr	r3, [pc, #112]	; (8004df4 <prvHeapInit+0xb0>)
 8004d84:	2200      	movs	r2, #0
 8004d86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d90:	2208      	movs	r2, #8
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	1a9b      	subs	r3, r3, r2
 8004d96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f023 0307 	bic.w	r3, r3, #7
 8004d9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	4a15      	ldr	r2, [pc, #84]	; (8004df8 <prvHeapInit+0xb4>)
 8004da4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004da6:	4b14      	ldr	r3, [pc, #80]	; (8004df8 <prvHeapInit+0xb4>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2200      	movs	r2, #0
 8004dac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004dae:	4b12      	ldr	r3, [pc, #72]	; (8004df8 <prvHeapInit+0xb4>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	1ad2      	subs	r2, r2, r3
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004dc4:	4b0c      	ldr	r3, [pc, #48]	; (8004df8 <prvHeapInit+0xb4>)
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	4a0a      	ldr	r2, [pc, #40]	; (8004dfc <prvHeapInit+0xb8>)
 8004dd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	4a09      	ldr	r2, [pc, #36]	; (8004e00 <prvHeapInit+0xbc>)
 8004dda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004ddc:	4b09      	ldr	r3, [pc, #36]	; (8004e04 <prvHeapInit+0xc0>)
 8004dde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004de2:	601a      	str	r2, [r3, #0]
}
 8004de4:	bf00      	nop
 8004de6:	3714      	adds	r7, #20
 8004de8:	46bd      	mov	sp, r7
 8004dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dee:	4770      	bx	lr
 8004df0:	20000174 	.word	0x20000174
 8004df4:	20012d74 	.word	0x20012d74
 8004df8:	20012d7c 	.word	0x20012d7c
 8004dfc:	20012d84 	.word	0x20012d84
 8004e00:	20012d80 	.word	0x20012d80
 8004e04:	20012d88 	.word	0x20012d88

08004e08 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004e10:	4b28      	ldr	r3, [pc, #160]	; (8004eb4 <prvInsertBlockIntoFreeList+0xac>)
 8004e12:	60fb      	str	r3, [r7, #12]
 8004e14:	e002      	b.n	8004e1c <prvInsertBlockIntoFreeList+0x14>
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	60fb      	str	r3, [r7, #12]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	687a      	ldr	r2, [r7, #4]
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d8f7      	bhi.n	8004e16 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	4413      	add	r3, r2
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d108      	bne.n	8004e4a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	441a      	add	r2, r3
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	441a      	add	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	429a      	cmp	r2, r3
 8004e5c:	d118      	bne.n	8004e90 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681a      	ldr	r2, [r3, #0]
 8004e62:	4b15      	ldr	r3, [pc, #84]	; (8004eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d00d      	beq.n	8004e86 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	441a      	add	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	601a      	str	r2, [r3, #0]
 8004e84:	e008      	b.n	8004e98 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e86:	4b0c      	ldr	r3, [pc, #48]	; (8004eb8 <prvInsertBlockIntoFreeList+0xb0>)
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	601a      	str	r2, [r3, #0]
 8004e8e:	e003      	b.n	8004e98 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e98:	68fa      	ldr	r2, [r7, #12]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d002      	beq.n	8004ea6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ea6:	bf00      	nop
 8004ea8:	3714      	adds	r7, #20
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	20012d74 	.word	0x20012d74
 8004eb8:	20012d7c 	.word	0x20012d7c

08004ebc <__libc_init_array>:
 8004ebc:	b570      	push	{r4, r5, r6, lr}
 8004ebe:	4e0d      	ldr	r6, [pc, #52]	; (8004ef4 <__libc_init_array+0x38>)
 8004ec0:	4c0d      	ldr	r4, [pc, #52]	; (8004ef8 <__libc_init_array+0x3c>)
 8004ec2:	1ba4      	subs	r4, r4, r6
 8004ec4:	10a4      	asrs	r4, r4, #2
 8004ec6:	2500      	movs	r5, #0
 8004ec8:	42a5      	cmp	r5, r4
 8004eca:	d109      	bne.n	8004ee0 <__libc_init_array+0x24>
 8004ecc:	4e0b      	ldr	r6, [pc, #44]	; (8004efc <__libc_init_array+0x40>)
 8004ece:	4c0c      	ldr	r4, [pc, #48]	; (8004f00 <__libc_init_array+0x44>)
 8004ed0:	f000 f82c 	bl	8004f2c <_init>
 8004ed4:	1ba4      	subs	r4, r4, r6
 8004ed6:	10a4      	asrs	r4, r4, #2
 8004ed8:	2500      	movs	r5, #0
 8004eda:	42a5      	cmp	r5, r4
 8004edc:	d105      	bne.n	8004eea <__libc_init_array+0x2e>
 8004ede:	bd70      	pop	{r4, r5, r6, pc}
 8004ee0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ee4:	4798      	blx	r3
 8004ee6:	3501      	adds	r5, #1
 8004ee8:	e7ee      	b.n	8004ec8 <__libc_init_array+0xc>
 8004eea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004eee:	4798      	blx	r3
 8004ef0:	3501      	adds	r5, #1
 8004ef2:	e7f2      	b.n	8004eda <__libc_init_array+0x1e>
 8004ef4:	08004f84 	.word	0x08004f84
 8004ef8:	08004f84 	.word	0x08004f84
 8004efc:	08004f84 	.word	0x08004f84
 8004f00:	08004f88 	.word	0x08004f88

08004f04 <memcpy>:
 8004f04:	b510      	push	{r4, lr}
 8004f06:	1e43      	subs	r3, r0, #1
 8004f08:	440a      	add	r2, r1
 8004f0a:	4291      	cmp	r1, r2
 8004f0c:	d100      	bne.n	8004f10 <memcpy+0xc>
 8004f0e:	bd10      	pop	{r4, pc}
 8004f10:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f18:	e7f7      	b.n	8004f0a <memcpy+0x6>

08004f1a <memset>:
 8004f1a:	4402      	add	r2, r0
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d100      	bne.n	8004f24 <memset+0xa>
 8004f22:	4770      	bx	lr
 8004f24:	f803 1b01 	strb.w	r1, [r3], #1
 8004f28:	e7f9      	b.n	8004f1e <memset+0x4>
	...

08004f2c <_init>:
 8004f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2e:	bf00      	nop
 8004f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f32:	bc08      	pop	{r3}
 8004f34:	469e      	mov	lr, r3
 8004f36:	4770      	bx	lr

08004f38 <_fini>:
 8004f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f3a:	bf00      	nop
 8004f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f3e:	bc08      	pop	{r3}
 8004f40:	469e      	mov	lr, r3
 8004f42:	4770      	bx	lr
